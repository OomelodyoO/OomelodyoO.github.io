<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>消息中间件的使用</title>
      <link href="/2019/06/19/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/06/19/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是消息中间件"><a href="#1-什么是消息中间件" class="headerlink" title="1.什么是消息中间件"></a>1.什么是消息中间件</h1><p>消息中间件利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p><h1 id="2-为什么使用消息中间件"><a href="#2-为什么使用消息中间件" class="headerlink" title="2.为什么使用消息中间件"></a>2.为什么使用消息中间件</h1><p>解耦、异步、削峰<br>虚拟场景：用户注册后，需调用其它系统，发相关的通知短信或邮件。<br><img src="/images/post/mq.png"></p><span id="more"></span><h2 id="2-1-解耦"><a href="#2-1-解耦" class="headerlink" title="2.1 解耦"></a>2.1 解耦</h2><p>图1：后续工作中增加系统E、F、G、H…，A系统工作人员需增加调用E、F、G、H…接口的工作。<br>图2：很好的解决了重复性的工作。</p><h2 id="2-2-异步"><a href="#2-2-异步" class="headerlink" title="2.2 异步"></a>2.2 异步</h2><table><thead><tr><td colspan="6" style="text-align:center;">图1 客户端获得返回耗时</td></tr></thead><tbody><tr><td>系统耗时</td><td>A</td><td>B</td><td>C</td><td>D</td><td>总耗时</td></tr><tr><td>串行</td><td>50</td><td>50</td><td>50</td><td>50</td><td>200</td></tr><tr><td>并行</td><td>50</td><td colspan="3" style="text-align:center;">50</td><td>100</td></tr></tbody></table><table><thead><tr><td colspan="7" style="text-align:center;">图2客户端获得返回耗时</td></tr></thead><tbody><tr><td>系统耗时</td><td>A</td><td>MQ</td><td>B</td><td>C</td><td>D</td><td>总耗时</td></tr><tr><td>MQ</td><td>50</td><td>5</td><td colspan="3" style="text-align:center;">0</td><td>55</td></tr></tbody></table><h2 id="2-3-削峰"><a href="#2-3-削峰" class="headerlink" title="2.3 削峰"></a>2.3 削峰</h2><p>图1：如果A系统业务简单处理快速，B、C、D处理速度慢，在遇到大流量时，B、C、D很容易被压垮。<br>图2：将A处理后的任务放到MQ队列，B、C、D系统处理完成一个拿一个。</p><h1 id="3-常用消息中间件"><a href="#3-常用消息中间件" class="headerlink" title="3.常用消息中间件"></a>3.常用消息中间件</h1><table><thead><tr><th>产品</th><th>kafka</th><th>RocketMQ</th><th>RabbitMQ</th></tr></thead><tbody><tr><td>设计定位</td><td>系统间的数据流管道，实时数据处理。<br/>例如：常规的消息系统、网站活性跟踪，监控数据，日志收集、处理等</td><td>非日志的可靠消息传输。<br/>例如：订单，交易，充值，流计算，消息推送，日志流式处理，binglog分发等</td><td>可靠消息传输。和RocketMQ类似。</td></tr><tr><td>成熟度</td><td>日志领域成熟</td><td>成熟</td><td>成熟</td></tr><tr><td>所属社区／公司</td><td>Apache</td><td>Alibaba开发，已加入到Apache下</td><td>Mozilla Public License</td></tr><tr><td>社区活跃度</td><td>高</td><td>中</td><td>高</td></tr><tr><td>API完备性</td><td>高</td><td>高</td><td>高</td></tr><tr><td>文档完备性</td><td>高</td><td>高</td><td>高</td></tr><tr><td>开发语言</td><td>Scala</td><td>Java</td><td>Erlang</td></tr><tr><td>客户端语言</td><td>C/C++、Python、Go、Erlang、.NET、Ruby、Node.js、PHP等</td><td>Java</td><td>Java、C、 C++、 Python、 PHP、Perl 等</td></tr><tr><td>持久化方式</td><td>磁盘文件</td><td>磁盘文件</td><td>内存、文件</td></tr><tr><td>部署方式</td><td>单机／集群</td><td>单机／集群</td><td>单机／集群</td></tr><tr><td>集群管理</td><td>zookeeper</td><td>name server</td><td></td></tr><tr><td>事务消息</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>优点</td><td>1、在高吞吐、低延迟、高可用、集群热扩展、集群容错上有非常好的表现<br/>2、producer端提供缓存、压缩功能，可节省性能，提高效率。<br/>3、提供顺序消费能力<br/>4、提供多种客户端语言<br/>5、生态完善，在大数据处理方面有大量配套的设施。</td><td>1、在高吞吐、低延迟、高可用上有非常好的表现；消息堆积时，性能也很好。<br/>2、api、系统设计都更加适在业务处理的场景。<br/>3、支持多种消费方式。<br/>4、支持broker消息过滤。<br/>5、支持事务。<br/>6、提供消息顺序消费能力；consumer可以水平扩展，消费能力很强。<br/>7、集群规模在50台左右，单日处理消息上百亿；经历过大数据量的考验，比较稳定可靠。</td><td>1、在高吞吐量、高可用上较前两者有所不如。<br/>2、支持多种客户端语言；支持amqp协议。<br/>3、由于erlang语言的特性，性能也比较好; 使用RAM模式时，性能很好。<br/>4、管理界面较丰富，在互联网公司也有较大规模的应用;</td></tr><tr><td>缺点</td><td>1、消费集群数目受到分区数目的限制。<br/>2、单机topic多时，性能会明显降低。<br/>3、不支持事务</td><td>1、相比于kafka，使用者较少，生态不够完善。消息堆积、吞吐率上也有所不如。<br/>2、不支持主从自动切换，master失效后，消费者需要一定的时间才能感知。<br/>3、客户端只支持Java</td><td>1、erlang 语言难度较大。集群不支持动态扩展。<br/>2、不支持事务、消息吞吐能力有限<br/>3、消息堆积时，性能会明显降低</td></tr></tbody></table><h1 id="4-Rabbit术语"><a href="#4-Rabbit术语" class="headerlink" title="4.Rabbit术语"></a>4.Rabbit术语</h1><table><thead><tr><th>术语</th><th>解释</th></tr></thead><tbody><tr><td>Broker</td><td>RabbbitMQ消息队列代理服务器实体。</td></tr><tr><td>Producer</td><td>发送消息的应用程序。</td></tr><tr><td>Consumer</td><td>接收消息的用户程序。</td></tr><tr><td>Exchange</td><td>交换器，生产者直接将消息发送给交换器。交换器将消息分发给指定的队列。它指定消息按什么规则，路由到哪个队列。</td></tr><tr><td>Binding</td><td>绑定，指的是交换器和队列之间的关系。它的作用就是把exchange和queue按照路由规则绑定起来。</td></tr><tr><td>Routing Key</td><td>路由关键字，exchange根据这个关键字进行消息投递。</td></tr><tr><td>vhost</td><td>虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。</td></tr><tr><td>Channel</td><td>消息通道，包含了大量的API可用于编程。在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</td></tr><tr><td>Connection</td><td>在客户创建一个到某个虚拟主机的连接。</td></tr><tr><td>ConnectionFactory</td><td>连接工厂类。可以创建一个连接。</td></tr></tbody></table><h1 id="5-Rabbit五种模式"><a href="#5-Rabbit五种模式" class="headerlink" title="5.Rabbit五种模式"></a>5.Rabbit五种模式</h1><p><strong><a href="/2018/09/05/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-SIMPLE%E6%A8%A1%E5%BC%8F/" title="RabbitMQ五种模式(SIMPLE模式)">RabbitMQ五种模式(SIMPLE模式)</a></strong><br><strong><a href="/2018/09/06/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-WORK%E6%A8%A1%E5%BC%8F/" title="RabbitMQ五种模式(WORK模式)">RabbitMQ五种模式(WORK模式)</a></strong><br><strong><a href="/2018/09/07/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-P-S%E6%A8%A1%E5%BC%8F/" title="RabbitMQ五种模式(P/S模式)">RabbitMQ五种模式(P/S模式)</a></strong><br><strong><a href="/2018/09/08/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-ROUTING%E6%A8%A1%E5%BC%8F/" title="RabbitMQ五种模式(ROUTING模式)">RabbitMQ五种模式(ROUTING模式)</a></strong><br><strong><a href="/2018/09/09/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-TOPICS%E6%A8%A1%E5%BC%8F/" title="RabbitMQ五种模式(TOPICS模式)">RabbitMQ五种模式(TOPICS模式)</a></strong></p><h1 id="6-中间件几个问题"><a href="#6-中间件几个问题" class="headerlink" title="6.中间件几个问题"></a>6.中间件几个问题</h1><h2 id="6-1消息重复消费"><a href="#6-1消息重复消费" class="headerlink" title="6.1消息重复消费"></a>6.1消息重复消费</h2><p>问题：<br>当Consumer消费完一条消息时，需要向Broker发送ack，如果因为网络等问题Consumer没有成功向Broker发送ack，那么消息将会被再此消费。<br>解决：<br>这就要求我们在消费消息时，需要考虑到幂等性消费（即同一数据调用一次和调用多次结果是一样的）。</p><h2 id="6-2消息顺序问题"><a href="#6-2消息顺序问题" class="headerlink" title="6.2消息顺序问题"></a>6.2消息顺序问题</h2><p>问题：<br>当Producer向Broker发送的消息需要Consumer有顺序的消费。<br>解决：<br>1.一个Consumer消费一个队列。<br>2.多个Consumer对应相应队列，Producer在生产消息时，需要顺序的消息通过一定的规则发送到同一队列。</p><h2 id="6-3分布式系统事务问题"><a href="#6-3分布式系统事务问题" class="headerlink" title="6.3分布式系统事务问题"></a>6.3分布式系统事务问题</h2><p>问题：<br>当系统间调用，希望同时成功或同时回滚的时候。<br>解决：<br><strong><a href="https://www.javazhiyin.com/29398.html" title="使用mq实现分布式事务-补偿事务一致性">使用mq实现分布式事务-补偿事务一致性</a></strong><br><strong><a href="https://www.jianshu.com/p/04bad986a4a2" title="使用mq实现分布式事务-补偿事务一致性">分布式事务——消息最终一致性方案</a></strong><br><strong><a href="https://blog.csdn.net/u013256816/article/details/55515234/" title="RabbitMQ之消息确认机制（事务+Confirm）">RabbitMQ之消息确认机制（事务+Confirm）</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-thread</title>
      <link href="/2019/05/29/java-thread/"/>
      <url>/2019/05/29/java-thread/</url>
      
        <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>线程安全大多数时候很重要。</p><h2 id="2-Thread"><a href="#2-Thread" class="headerlink" title="2.Thread"></a>2.Thread</h2><p>线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。<br><img src="/images/post/java-thread.png"></p><span id="more"></span><h3 id="1-Thread-五种状态"><a href="#1-Thread-五种状态" class="headerlink" title="(1)Thread 五种状态"></a>(1)Thread 五种状态</h3><h4 id="新建状态"><a href="#新建状态" class="headerlink" title="新建状态:"></a>新建状态:</h4><p>使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。</p><h4 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态:"></a>就绪状态:</h4><p>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p><h4 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态:"></a>运行状态:</h4><p>如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p><h4 id="阻塞状态"><a href="#阻塞状态" class="headerlink" title="阻塞状态:"></a>阻塞状态:</h4><p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：<br>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。<br>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。<br>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。</p><h4 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态:"></a>死亡状态:</h4><p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p><h3 id="2-Thread-常用方法"><a href="#2-Thread-常用方法" class="headerlink" title="(2)Thread 常用方法"></a>(2)Thread 常用方法</h3><table><thead><tr><th>方法名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>public Thread(Runnable target)</td><td>构造</td><td>接收Runnable接口子类对象，实例化Thread对象</td></tr><tr><td>public Thread(Runnable target,String name)</td><td>构造</td><td>接收Runnable接口子类对象，实例化Thread对象，并设置线程名称</td></tr><tr><td>public Thread(String name)</td><td>构造</td><td>实例化Thread对象，并设置线程名称</td></tr><tr><td>public static Thread currentThread()</td><td>普通</td><td>返回目前正在运行的线程</td></tr><tr><td>public final String getName()</td><td>普通</td><td>返回线程名称</td></tr><tr><td>public final int getPriority()</td><td>普通</td><td>返回线程的优先级</td></tr><tr><td>public boolean isInterrupted()</td><td>普通</td><td>判断目前线程是否被中断</td></tr><tr><td>public final boolean isAlive()</td><td>普通</td><td>判断线程是否在活动</td></tr><tr><td>public final void join() throws Interrupted Exception</td><td>普通</td><td>等待线程死亡</td></tr><tr><td>public final synchronized void join(long millis) throws InterruptedException</td><td>普通</td><td>等待millis毫秒后，线程死亡</td></tr><tr><td>public void run()</td><td>普通</td><td>执行线程</td></tr><tr><td>public final void setName(String Name)</td><td>普通</td><td>设置线程名称</td></tr><tr><td>public final void setPriority(int newPriority)</td><td>普通</td><td>设置线程优先级</td></tr><tr><td>public static void sleep(long millis) throws InterruptedExeption</td><td>普通</td><td>使目前正在执行的线程休眠millis毫秒</td></tr><tr><td>public void start()</td><td>普通</td><td>开始执行线程</td></tr><tr><td>public String toString()</td><td>普通</td><td>返回代表线程的字符串</td></tr><tr><td>public static void yield()</td><td>普通</td><td>将目前正在执行的线程暂停，允许其他线程执行</td></tr><tr><td>public final void setDaemon(boolean on)</td><td>普通</td><td>将一个线程设置成后台运行</td></tr></tbody></table><h3 id="3-Wait-方法"><a href="#3-Wait-方法" class="headerlink" title="(3)Wait 方法"></a>(3)Wait 方法</h3><p>wait()方法是Object类里的方法，当一个线程执行到wait()方法时，它就进入到一个和该对象相关的等待池中，同时失去（释放）了对象的机锁（暂时失去机锁，wait(long timeout)超时时间到后还需要返还对象锁），其他线程可以访问。</p><p>wait()使用notify或者notifyAll或者指定睡眠时间来唤醒当前等待池中的线程。</p><p>wait()必须放在synchronized block中，否则会在program runtime时扔出 ”java.lang.IllegalMonitorStateException“ 异常。</p><p>sleep()和wait()方法的最大区别是：</p><p>sleep()睡眠时，保持对象锁，仍然占有该锁</p><p>wait()睡眠时，释放对象锁。</p><p>wait()和sleep()都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException（但不建议使用该方法）。</p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.isInterrupted()) &#123;</span><br><span class="line">                    Thread.currentThread().sleep(<span class="number">50</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程&quot;</span> + getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.currentThread().sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;线程&quot;</span> + getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="comment">//        testNormal(threadA, threadB);</span></span><br><span class="line"><span class="comment">//        testWait(threadA, threadB);</span></span><br><span class="line"><span class="comment">//        testJoin(threadA, threadB);</span></span><br><span class="line">        testInterrupt(threadA, threadB);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testNormal</span><span class="params">(ThreadA threadA, ThreadB threadB)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======普通线程启动======&quot;</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testWait</span><span class="params">(ThreadA threadA, ThreadB threadB)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======wait 测试======&quot;</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line">        <span class="keyword">synchronized</span> (threadA) &#123;</span><br><span class="line">            threadA.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        threadB.start();</span><br><span class="line">        <span class="keyword">synchronized</span> (threadA) &#123;</span><br><span class="line">            threadA.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJoin</span><span class="params">(ThreadA threadA, ThreadB threadB)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======join 测试======&quot;</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line">        threadA.join();</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInterrupt</span><span class="params">(ThreadA threadA, ThreadB threadB)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======interrupt 测试======&quot;</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line">        threadA.interrupt();</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>CRUD谁都会，为了写出优秀的代码，必须静下心来学习。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Jvm</title>
      <link href="/2019/05/27/Java%20Jvm/"/>
      <url>/2019/05/27/Java%20Jvm/</url>
      
        <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>为了更好的使用java进行编程</p><h2 id="2-JVM"><a href="#2-JVM" class="headerlink" title="2.JVM"></a>2.JVM</h2><p><img src="/images/post/java-jvm.png"></p><span id="more"></span><p>PC程序计数器(线程私有)</p><p>一块较小的内存空间, 是当前线程所执行的字节码的行号指示器，每条线程都要有一个独立的程序计数器，这类内存也称为“线程私有”的内存。正在执行 java 方法的话，计数器记录的是虚拟机字节码指令的地址（当前指令的地址）。如果还是 Native 方法，则为空。这个内存区域是唯一一个在虚拟机中没有规定任何 OutOfMemoryError 情况的区域。</p><p>虚拟机栈(线程私有)</p><p>是描述java方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><pre><code>局部变量表：局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。操作数栈：Java虚拟机的解释执行引擎被称为”基于栈的执行引擎”，其中所指的栈就是指－操作数栈。动态连接：在一个class文件中，一个方法要调用其他方法，需要将这些方法的符号引用转化为其在内存地址中的直接引用，而符号引用存在于方法区中的运行时常量池。</code></pre><p>本地方法栈(线程私有)</p><p>本地方法区和 Java Stack 作用类似, 区别是虚拟机栈为执行 Java 方法服务, 而本地方法栈则为Native 方法服务, 如果一个 VM 实现使用 C-linkage 模型来支持 Native 调用, 那么该栈将会是一个C 栈，但 HotSpot VM 直接就把本地方法栈和虚拟机栈合二为一。</p><p>堆（Heap-线程共享）</p><p>是被线程共享的一块内存区域，创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行垃圾收集的最重要的内存区域。由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以细分为: 新生代(Eden 区、From Survivor 区和 To Survivor 区)和老年代。</p><p>方法区/永久代（线程共享）</p><p>即我们常说的永久代(Permanent Generation), 用于存储被 JVM 加载的类信息、常量、静态变量、即时编译器编译后的代码等数据. HotSpot VM把GC分代收集扩展至方法区, 即使用Java堆的永久代来实现方法区, 这样 HotSpot 的垃圾收集器就可以像管理 Java 堆一样管理这部分内存, 而不必为方法区开发专门的内存管理器(永久带的内存回收的主要目标是针对常量池的回收和类型的卸载, 因此收益一般很小)。</p><table><thead><tr><th>参数名称</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td>-Xms</td><td>初始堆大小</td><td>物理内存的1/64(&lt;1GB)</td></tr><tr><td>-Xmx</td><td>最大堆大小</td><td>物理内存的1/4(&lt;1GB)</td></tr><tr><td>-Xmn</td><td>年轻代大小(1.4or lator)</td><td></td></tr><tr><td>-XX:NewSize</td><td>设置年轻代大小(for 1.3/1.4)</td><td></td></tr><tr><td>-XX:MaxNewSize</td><td>年轻代最大值(for 1.3/1.4)</td><td></td></tr><tr><td>-XX:PermSize</td><td>设置持久代(perm gen)初始值</td><td>物理内存的1/64</td></tr><tr><td>-XX:MaxPermSize</td><td>设置持久代最大值</td><td>物理内存的1/4</td></tr><tr><td>-Xss</td><td>每个线程的堆栈大小</td><td></td></tr><tr><td>-XX:NewRatio</td><td>年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td><td></td></tr><tr><td>-XX:SurvivorRatio</td><td>Eden区与Survivor区的大小比值</td><td></td></tr></tbody></table><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>以上可知由于线程有共享的部分，会造成线程不安全的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济名词</title>
      <link href="/2019/01/24/%E7%BB%8F%E6%B5%8E%E5%90%8D%E8%AF%8D/"/>
      <url>/2019/01/24/%E7%BB%8F%E6%B5%8E%E5%90%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="GDP-国内生产总值"><a href="#GDP-国内生产总值" class="headerlink" title="GDP=国内生产总值"></a>GDP=国内生产总值</h3><p>一个国家(或地区)所有常驻单位，在一定时期内，生产的全部最终产品和服务价值的总和，常被认为是衡量国家(或地区)经济状况的指标。</p><h3 id="CPI-居民消费价格指数（consumer-price-index）"><a href="#CPI-居民消费价格指数（consumer-price-index）" class="headerlink" title="CPI=居民消费价格指数（consumer price index）"></a>CPI=居民消费价格指数（consumer price index）</h3><p>居民消费价格指数，是一个反映居民家庭一般所购买的消费品和服务项目价格水平变动情况的宏观经济指标。它是在特定时段内度量一组代表性消费商品及服务项目的价格水平随时间而变动的相对数，是用来反映居民家庭购买消费商品及服务的价格水平的变动情况。</p><span id="more"></span><h3 id="PPI-生产价格指数（Producer-Price-Index）"><a href="#PPI-生产价格指数（Producer-Price-Index）" class="headerlink" title="PPI=生产价格指数（Producer Price Index）"></a>PPI=生产价格指数（Producer Price Index）</h3><p>衡量工业企业产品出厂价格变动趋势和变动程度的指数，是反映某一时期生产领域价格变动情况的重要经济指标，也是制定有关经济政策和国民经济核算的重要依据。生产者物价指数（Producer Price Index, PPI）与CPI不同，主要的目的是衡量企业购买的一篮子物品和劳务的总费用。由于企业最终要把它们的费用以更高的消费价格的形式转移给消费者，所以，通常认为生产物价指数的变动对预测消费物价指数的变动是有用的。</p><h3 id="PMI-采购经理指数（Purchasing-Managers’-Index）"><a href="#PMI-采购经理指数（Purchasing-Managers’-Index）" class="headerlink" title="PMI=采购经理指数（Purchasing Managers’ Index）"></a>PMI=采购经理指数（Purchasing Managers’ Index）</h3><p>通过对采购经理的月度调查汇总出来的指数，反映了经济的变化趋势。PMI是一套月度发布的、综合性的经济监测指标体系，分为制造业PMI、服务业PMI，也有一些国家建立了建筑业PMI。PMI指数50为荣枯分水线。</p><h3 id="M0-流通中现金"><a href="#M0-流通中现金" class="headerlink" title="M0=流通中现金"></a>M0=流通中现金</h3><p>银行体系以外各个单位的库存现金和居民的手持现金之和。</p><h3 id="M1-狭义货币供应量"><a href="#M1-狭义货币供应量" class="headerlink" title="M1=狭义货币供应量"></a>M1=狭义货币供应量</h3><p>M0加上单位在银行的活期存款。</p><h3 id="M2-广义货币供应量"><a href="#M2-广义货币供应量" class="headerlink" title="M2=广义货币供应量"></a>M2=广义货币供应量</h3><p>M1加上单位在银行的定期存款和城乡居民个人在银行的各项储蓄存款以及证券客户保证金。M2与M1的差额，即单位的定期存款和个人的储蓄存款之和，通常称作准货币。</p><h3 id="M0-流通中现金-1"><a href="#M0-流通中现金-1" class="headerlink" title="M0=流通中现金"></a>M0=流通中现金</h3><h3 id="M1-M0-单位活期存款"><a href="#M1-M0-单位活期存款" class="headerlink" title="M1=M0+单位活期存款"></a>M1=M0+单位活期存款</h3><h3 id="M2-M1-单位定期存款-个人的储蓄存款-证券公司的客户保证金"><a href="#M2-M1-单位定期存款-个人的储蓄存款-证券公司的客户保证金" class="headerlink" title="M2=M1+单位定期存款+个人的储蓄存款+证券公司的客户保证金"></a>M2=M1+单位定期存款+个人的储蓄存款+证券公司的客户保证金</h3><h3 id="M3-M2-具有高流动性的证券和其它资产"><a href="#M3-M2-具有高流动性的证券和其它资产" class="headerlink" title="M3=M2+具有高流动性的证券和其它资产"></a>M3=M2+具有高流动性的证券和其它资产</h3>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 金融 </tag>
            
            <tag> 经济 </tag>
            
            <tag> 概念 </tag>
            
            <tag> 名词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI、VC、PE、IPO</title>
      <link href="/2018/12/19/AI%E3%80%81VC%E3%80%81PE%E3%80%81IPO/"/>
      <url>/2018/12/19/AI%E3%80%81VC%E3%80%81PE%E3%80%81IPO/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>天使投资(AI)：指具有一定净财富的人士，对具有巨大发展潜力的高风险的初创企业进行早期的直接投资。</p><p>风险投资（VC)：由一群具有科技及财务相关知识与经验的人所组合而成的，经由直接投资获取投资公司股权的方式，提供资金给需要资金者（被投资公司）。</p><p>私募基金(PE)：是指以非公开方式向特定投资者募集资金并以证券为投资对象的证券投资基金。私募基金是以大众传播以外的手段招募,发起人集合非公众性多元主体的资金设立投资基金，进行证券投资。</p><p>首次公开募股(IPO)：是指一家企业或公司 （股份有限公司）第一次将它的股份向公众出售。</p><span id="more"></span><h2 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h2><p>AI–&gt;VC–&gt;PE–&gt;IPO</p><p>天使投资–&gt;A轮–&gt;B轮–&gt;C轮–&gt;…–&gt;IPO</p>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 金融 </tag>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基金相关概念</title>
      <link href="/2018/12/18/%E5%9F%BA%E9%87%91%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
      <url>/2018/12/18/%E5%9F%BA%E9%87%91%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>1.基金：</p><p>广义：基金是指为了某种目的而设立的具有一定数量的资金。例如，信托投资基金、公积金、保险基金、退休基金，各种基金会的基金。</p><p>狭义：人们平常所说的基金主要是指证券投资基金。 </p><p>2.债券：债券是政府、企业、银行等债务人为筹集资金,按照法定程序发行并向债权人承诺于指定日期还本付息的有价证券。</p><p>3.股票：股票（stock）是股份公司发行的所有权凭证，是股份公司为筹集资金而发行给各个股东作为持股凭证并借以取得股息和红利的一种有价证券。</p><span id="more"></span><p>4.认购：一般只有新基金才有的名词。</p><p>5.申购：募集期之外的购买该基金的行为的称呼。</p><p>6.赎回：就是将手中的基金卖掉，换回现金。</p><p>7.基金份额：是指基金发起人向投资者公开发行的，表示持有人按其所持份额对基金财产享有收益分配权、清算后剩余财产取得权和其他相关权利，并承担相应义务的凭证。</p><p>8.基金净值：是指当前的基金总净资产除以基金总份额。其计算公式为：基金单位净值=总净资产/基金份额。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>1.开发式与封闭式</p><table><thead><tr><th></th><th>总份额是否固定</th><th>是否能与基金公司买卖</th></tr></thead><tbody><tr><td>开发式</td><td>不固定</td><td>能</td></tr><tr><td>封闭式</td><td>固定</td><td>不能</td></tr></tbody></table><p>2.股票型、债券型、混合型</p><p>股票型基金：是指股票型基金的股票仓位不能低于80%。</p><p>债券型基金：基金资产80%以上投资于债券的为债券基金。</p><p>混合型基金：除股票型基金，债券型基金以为的属于混合型基金。</p><p>3.指数型基金</p><p>就是以指数成分股为投资对象的基金，力求取得与指数大致相同的投资收益率。</p><p>4.货币基金</p><p>全称是货币市场基金，它只投资于定存、一年以下的短期债券等风险极低的品种。</p><p>5.保本基金</p><p>就是在一定期间内，对所投资的本金提供一定比例的保证保本的基金。</p><p>6.成长型、收入型、平衡型</p><p>成长型基金：注重资本利得，追求公司的资本增值，主要投资有较大升值空间的股票。</p><p>收入型基金：注重红利，追求当前收入为目标，主要投资分红多的股票、债券。</p><p>平衡型基金：介于两者之间。</p><p>7.公募基金和私募基金</p><p>公募基金：是公开募集资金，公开销售的基金。</p><p>私募基金：是私下募集基金， 不公开销售的基金。</p><table><thead><tr><th>类别</th><th>针对对象</th><th>募集方式</th><th>信息披露</th><th>投资限制</th><th>管理费</th></tr></thead><tbody><tr><td>公募</td><td>社会大众</td><td>公开发行</td><td>公开</td><td>严格限制</td><td>按比例收取</td></tr><tr><td>私募</td><td>特定对象</td><td>私下募集</td><td>保密</td><td>协议约定</td><td>按业绩收取</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 金融 </tag>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>足彩问题</title>
      <link href="/2018/12/12/%E8%B6%B3%E5%BD%A9%E9%97%AE%E9%A2%98/"/>
      <url>/2018/12/12/%E8%B6%B3%E5%BD%A9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="1-A，B两支球队"><a href="#1-A，B两支球队" class="headerlink" title="1)A，B两支球队"></a>1)A，B两支球队</h3><h3 id="2-博彩公司赔率"><a href="#2-博彩公司赔率" class="headerlink" title="2)博彩公司赔率"></a>2)博彩公司赔率</h3><table><thead><tr><th>公司</th><th>A胜</th><th>平</th><th>B胜</th></tr></thead><tbody><tr><td>C1</td><td>1.40</td><td>4.57</td><td>6.5</td></tr><tr><td>C2</td><td>1.31</td><td>5.75</td><td>9.55</td></tr><tr><td>C3</td><td>1.32</td><td>5.65</td><td>11.5</td></tr></tbody></table><span id="more"></span><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><p>表中数据为获得100元，所要花费的金额</p><table><thead><tr><th>公司</th><th>A胜</th><th>平</th><th>B胜</th><th>总计</th></tr></thead><tbody><tr><td>C1</td><td>71.5</td><td>21.9</td><td>15.4</td><td>108.8</td></tr><tr><td>C2</td><td>76.4</td><td>17.4</td><td>10.5</td><td>104.3</td></tr><tr><td>C3</td><td>75.76</td><td>17.7</td><td>8.7</td><td>102.16</td></tr><tr><td>最小值</td><td>71.5</td><td>17.4</td><td>8.7</td><td>97.6</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上这些，博彩公司肯定十分清楚。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凯利公式</title>
      <link href="/2018/12/12/%E5%87%AF%E5%88%A9%E5%85%AC%E5%BC%8F/"/>
      <url>/2018/12/12/%E5%87%AF%E5%88%A9%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>某项投资：</p><table><thead><tr><th>数据</th><th>F</th><th>f</th><th>p</th><th>q</th><th>b</th></tr></thead><tbody><tr><td>概率</td><td>拥有资本总值</td><td>应投资本比值</td><td>获胜概率</td><td>失败概率(1 - p)</td><td>赔率</td></tr></tbody></table><p>那么应不应该投资？应该如何投资？</p><h2 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h2><h3 id="第k-1次投资结果"><a href="#第k-1次投资结果" class="headerlink" title="第k+1次投资结果"></a>第k+1次投资结果</h3><p>成功投资：$F_{k+1} = F_k(1+bf)$<br>失败投资：$F_{k+1} = F_k(1-f)$</p><span id="more"></span><h3 id="第n次投资结果"><a href="#第n次投资结果" class="headerlink" title="第n次投资结果"></a>第n次投资结果</h3><p>$F_n = F (1+bf)^{np}(1-f)^{n(1-p)}$</p><p>取对数：</p><p>$\sqrt[n]{F_n \over F} = (1+bf)^{p}(1-f)^{(1-p)}$</p><p>$\ln F_{(f)} = \ln(1+bf)^{p}(1-f)^{(1-p)}$</p><p>$\ln F_{(f)} = \ln(1+bf)^{p} + \ln(1-f)^{(1-p)}$</p><p>$\ln F_{(f)} = p\ln(1+bf)+(1-p)\ln(1-f)$</p><p>求导：</p><p>${d\ln F_{(f)} \over df } = p{1 \over (1+bf)}(1+bf)^{‘} + (1-p){1 \over (1-f)}(1-f)^{‘}$</p><p>${d\ln F_{(f)} \over df } = {pb \over (1+bf)} + {(1-p)(-1) \over (1-f)}$</p><p>${d\ln F_{(f)} \over df } = {(pb + p -1) - bf \over (1+bf)(1-f)}$</p><p>因为$\ln F_{(f)}$为增函数，所以导数如果等于0，可以求取最大值，即每次投资收益最大值。</p><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>$$f = {pb - (1 - p) \over b}$$<br>f &gt; 0 按比例投资<br>f &lt; 0 不投资</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>理论永远是理论，不要和现实混为一谈。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数定律</title>
      <link href="/2018/12/11/%E5%A4%A7%E6%95%B0%E5%AE%9A%E5%BE%8B/"/>
      <url>/2018/12/11/%E5%A4%A7%E6%95%B0%E5%AE%9A%E5%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在数学与统计学中，大数定律又称大数法则、大数律，是描述相当多次数重复实验的结果的定律。根据这个定律知道，样本数量越多，则其算术平均值就越趋近期望值。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><h3 id="1-抛掷一颗均匀的6面的骰子，六面出现概率为"><a href="#1-抛掷一颗均匀的6面的骰子，六面出现概率为" class="headerlink" title="1)抛掷一颗均匀的6面的骰子，六面出现概率为"></a>1)抛掷一颗均匀的6面的骰子，六面出现概率为</h3><table><thead><tr><th>数据</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td>概率</td><td>1/6</td><td>1/6</td><td>1/6</td><td>1/6</td><td>1/6</td><td>1/6</td></tr></tbody></table><p>数学期望 = 1 × (1/6) + 2 × (1/6) + 3 × (1/6) + 4 × (1/6) + 5 × (1/6) + 6 × (1/6)</p><p>数学期望 = 3.5</p><span id="more"></span><h3 id="2-使用程序模拟投掷过程"><a href="#2-使用程序模拟投掷过程" class="headerlink" title="2)使用程序模拟投掷过程"></a>2)使用程序模拟投掷过程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int count = 100 * 10000;</span><br><span class="line">        int oneCount = 0;</span><br><span class="line">        int twoCount = 0;</span><br><span class="line">        int threeCount = 0;</span><br><span class="line">        int fourCount = 0;</span><br><span class="line">        int fiveCount = 0;</span><br><span class="line">        int sixCount = 0;</span><br><span class="line">        for (int i = 1; i &lt;= count; i++) &#123;</span><br><span class="line">            int ran = (int) (Math.random() * 6) + 1;</span><br><span class="line">            switch (ran) &#123;</span><br><span class="line">                case 1:</span><br><span class="line">                    oneCount = oneCount + 1;</span><br><span class="line">                    break;</span><br><span class="line">                case 2:</span><br><span class="line">                    twoCount = twoCount + 1;</span><br><span class="line">                    break;</span><br><span class="line">                case 3:</span><br><span class="line">                    threeCount = threeCount + 1;</span><br><span class="line">                    break;</span><br><span class="line">                case 4:</span><br><span class="line">                    fourCount = fourCount + 1;</span><br><span class="line">                    break;</span><br><span class="line">                case 5:</span><br><span class="line">                    fiveCount = fiveCount + 1;</span><br><span class="line">                    break;</span><br><span class="line">                case 6:</span><br><span class="line">                    sixCount = sixCount + 1;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            if (i == 100 || i == 10000 || i == 1000000) &#123;</span><br><span class="line">                System.out.println(&quot;第&quot; + i + &quot;次统计：&quot;);</span><br><span class="line">                System.out.println(&quot;1\t2\t3\t4\t5\t6&quot;);</span><br><span class="line">                System.out.print(oneCount + &quot;\t&quot;);</span><br><span class="line">                System.out.print(twoCount + &quot;\t&quot;);</span><br><span class="line">                System.out.print(threeCount + &quot;\t&quot;);</span><br><span class="line">                System.out.print(fourCount + &quot;\t&quot;);</span><br><span class="line">                System.out.print(fiveCount + &quot;\t&quot;);</span><br><span class="line">                System.out.println(sixCount);</span><br><span class="line">                System.out.print(new BigDecimal(oneCount).divide(new BigDecimal(i)) + &quot;\t&quot;);</span><br><span class="line">                System.out.print(new BigDecimal(twoCount).divide(new BigDecimal(i)) + &quot;\t&quot;);</span><br><span class="line">                System.out.print(new BigDecimal(threeCount).divide(new BigDecimal(i)) + &quot;\t&quot;);</span><br><span class="line">                System.out.print(new BigDecimal(fourCount).divide(new BigDecimal(i)) + &quot;\t&quot;);</span><br><span class="line">                System.out.print(new BigDecimal(fiveCount).divide(new BigDecimal(i)) + &quot;\t&quot;);</span><br><span class="line">                System.out.println(new BigDecimal(sixCount).divide(new BigDecimal(i)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-统计结果"><a href="#3-统计结果" class="headerlink" title="3)统计结果"></a>3)统计结果</h3><p>第100次统计：</p><table><thead><tr><th>数据</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td>出现次数</td><td>17</td><td>15</td><td>16</td><td>19</td><td>21</td><td>12</td></tr><tr><td>出现概率</td><td>0.17</td><td>0.15</td><td>0.16</td><td>0.19</td><td>0.21</td><td>0.12</td></tr></tbody></table><p>总数为：348</p><p>算术平均数为：3.48</p><p>第10000次统计：</p><table><thead><tr><th>数据</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td>出现次数</td><td>1724</td><td>1638</td><td>1639</td><td>1636</td><td>1664</td><td>1699</td></tr><tr><td>出现概率</td><td>0.1724</td><td>0.1638</td><td>0.1639</td><td>0.1636</td><td>0.1664</td><td>0.1699</td></tr></tbody></table><p>总数为：34975</p><p>算术平均数为：3.4975</p><p>第1000000次统计：</p><table><thead><tr><th>数据</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td>出现次数</td><td>167149</td><td>166751</td><td>166553</td><td>166521</td><td>166688</td><td>166338</td></tr><tr><td>出现概率</td><td>0.167149</td><td>0.166751</td><td>0.166553</td><td>0.166521</td><td>0.166688</td><td>0.166338</td></tr></tbody></table><p>总数为：3497862</p><p>算术平均数为：3.497862</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>随着投掷次数的不断增多，算术平均数无限接近于期望值</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 定律 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 8</title>
      <link href="/2018/12/04/Java%208/"/>
      <url>/2018/12/04/Java%208/</url>
      
        <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>按照 Java 的发布计划，Java 12 将于2019年 3 月推出，本人现在还在使用Java 8，这本身没有什么问题，但“惭愧”的是目前不会使用8的新特性。</p><p>“这段代码中，使用了Java 8 的<font size=6>LAMBDA</font>表达式”。</p><p>“一会让你见识见识Java 8 的<font size=6>STREAM</font>有多好用”。</p><p>每当听到或看到，类似以上内容的话语或文字的时候，发出感慨者那种优于其它人的自豪感，让我更加的“惭愧”。</p><span id="more"></span><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><p>LAMBDA</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不用LAMBDA</span></span><br><span class="line">        MathOperation mathOperation = <span class="keyword">new</span> MathOperation() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> test().operate(<span class="number">100</span>, <span class="number">50</span>, mathOperation));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用LAMBDA</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> test().operate(<span class="number">100</span>, <span class="number">50</span>, (a, b) -&gt; a + b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">MathOperation</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">operate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, MathOperation mathOperation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mathOperation.operation(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>STREAM</p><p>Set;List;Map;SortedSet;SortedMap;HashSet;TreeSet;ArrayList;LinkedList;Vector;Collections;Arrays;AbstractCollection<br>以上这些类都有stream()方法，这就是传说中的STREAM。</p><ul><li>filter    方法用于通过设置的条件过滤出元素。</li><li>sorted    方法用于对流进行排序。</li><li>map       方法用于映射每个元素到对应的结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; rStrings;</span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;ac&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;ag&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;stream filter:&quot;</span>);</span><br><span class="line">        rStrings = strings.stream().filter(string -&gt; string.contains(<span class="string">&quot;a&quot;</span>)).collect(Collectors.toList());</span><br><span class="line">        System.out.println(rStrings.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;stream sorted:&quot;</span>);</span><br><span class="line">        rStrings = strings.stream().sorted().collect(Collectors.toList());</span><br><span class="line">        System.out.println(rStrings.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;stream map:&quot;</span>);</span><br><span class="line">        rStrings = strings.stream().map(string -&gt; string + string).collect(Collectors.toList());</span><br><span class="line">        System.out.println(rStrings.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Console</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stream filter:</span><br><span class="line">[a, ab, ac, ag]</span><br><span class="line">stream sorted:</span><br><span class="line">[a, ab, ac, ag, d, e, f]</span><br><span class="line">stream map:</span><br><span class="line">[aa, abab, acac, dd, ee, ff, agag]</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>代码变简洁了，可读性和调试变得不方便了。</p><h2 id="4-名人名言"><a href="#4-名人名言" class="headerlink" title="4.名人名言"></a>4.名人名言</h2><p>有的人滥用形容词语和形容句子，以为堆砌得越多越漂亮；有的人不肯顺着一般人的表达习惯来写，以为不说些离奇别扭的话就不成其为文章；有的人搬弄一些俗滥的成语或者典故，以为不这样做不足以显示自己的高明。—叶圣陶</p><p>有真意，去粉饰，少做作，勿卖弄。—鲁迅</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步、同步、阻塞、非阻塞</title>
      <link href="/2018/11/18/%E5%BC%82%E6%AD%A5%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%81%E9%98%BB%E5%A1%9E%E3%80%81%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
      <url>/2018/11/18/%E5%BC%82%E6%AD%A5%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%81%E9%98%BB%E5%A1%9E%E3%80%81%E9%9D%9E%E9%98%BB%E5%A1%9E/</url>
      
        <content type="html"><![CDATA[<h6 id="事件：打电话订外卖，拨通老板电话，询问菜品，选菜。"><a href="#事件：打电话订外卖，拨通老板电话，询问菜品，选菜。" class="headerlink" title="事件：打电话订外卖，拨通老板电话，询问菜品，选菜。"></a>事件：打电话订外卖，拨通老板电话，询问菜品，选菜。</h6><p>同步：老板说：”我看一下厨房，还有没菜，还能不能做！”，然后就去问了，等确认后告诉你结果。（可能一分钟，也可能好久好久）<br>异步：老板说：”我去查一下，查好了电话告诉你！”，然后就挂电话了。（不返回结果）等确认后，给你打电话。</p><p>阻塞：你等待，不去做任何事情，一直等待结果。<br>非阻塞：你不等待，先去做别的事情，偶尔检查一下老板有没有老板的消息。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> 同步 </tag>
            
            <tag> 阻塞 </tag>
            
            <tag> 非阻塞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2018/11/17/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/11/17/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h6 id="一、初始化仓库"><a href="#一、初始化仓库" class="headerlink" title="一、初始化仓库"></a>一、初始化仓库</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">git init [project-name]</span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">git clone [url]</span><br></pre></td></tr></table></figure><h6 id="二、工作区–-gt-暂存区"><a href="#二、工作区–-gt-暂存区" class="headerlink" title="二、工作区–&gt;暂存区"></a>二、工作区–&gt;暂存区</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">git add .</span><br><span class="line"># 从暂存区删除到工作区</span><br><span class="line">git rm --cached &lt;file&gt;...</span><br></pre></td></tr></table></figure><span id="more"></span><h6 id="三、暂存区–-gt-仓库区"><a href="#三、暂存区–-gt-仓库区" class="headerlink" title="三、暂存区–&gt;仓库区"></a>三、暂存区–&gt;仓库区</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;message...&quot;</span><br></pre></td></tr></table></figure><h6 id="四、分支"><a href="#四、分支" class="headerlink" title="四、分支"></a>四、分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">git branch -a</span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch-name]</span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">git checkout -b [branch]</span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">git checkout [branch-name]</span><br><span class="line"># 删除分支</span><br><span class="line">git branch -d [branch-name]</span><br></pre></td></tr></table></figure><h6 id="五、远程同步"><a href="#五、远程同步" class="headerlink" title="五、远程同步"></a>五、远程同步</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># remote为url地址，或者本地起到别名 branch为本地分支名</span><br><span class="line"># 为远程地址起名</span><br><span class="line">git remote add [&lt;options&gt;] &lt;name&gt; &lt;url&gt;</span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">git pull [remote] [branch]</span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">git push [remote] [branch]</span><br><span class="line"># 列出所有远程别名</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h6 id="六、查看信息"><a href="#六、查看信息" class="headerlink" title="六、查看信息"></a>六、查看信息</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">git status</span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">git log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学逻辑题</title>
      <link href="/2018/10/22/%E6%95%B0%E5%AD%A6%E9%80%BB%E8%BE%91%E9%A2%98/"/>
      <url>/2018/10/22/%E6%95%B0%E5%AD%A6%E9%80%BB%E8%BE%91%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-红眼睛和蓝眼睛"><a href="#1-红眼睛和蓝眼睛" class="headerlink" title="1.红眼睛和蓝眼睛"></a>1.红眼睛和蓝眼睛</h2><h5 id="一个岛上有100个人，其中有5个红眼睛，95个蓝眼睛。这个岛有三个奇怪的宗教规则。"><a href="#一个岛上有100个人，其中有5个红眼睛，95个蓝眼睛。这个岛有三个奇怪的宗教规则。" class="headerlink" title="一个岛上有100个人，其中有5个红眼睛，95个蓝眼睛。这个岛有三个奇怪的宗教规则。"></a>一个岛上有100个人，其中有5个红眼睛，95个蓝眼睛。这个岛有三个奇怪的宗教规则。</h5><blockquote><ul><li>他们不能照镜子，不能看自己眼睛的颜色。</li><li>他们不能告诉别人对方的眼睛是什么颜色。</li><li>一旦有人知道了自己是红眼睛，他就必须在当天夜里自杀。</li></ul></blockquote><h5 id="某天，有个旅行者到了这个岛上。由于不知道这里的规矩，所以他在和全岛人一起狂欢的时候，不留神就说了一句话：【你们这里有红眼睛的人。】"><a href="#某天，有个旅行者到了这个岛上。由于不知道这里的规矩，所以他在和全岛人一起狂欢的时候，不留神就说了一句话：【你们这里有红眼睛的人。】" class="headerlink" title="某天，有个旅行者到了这个岛上。由于不知道这里的规矩，所以他在和全岛人一起狂欢的时候，不留神就说了一句话：【你们这里有红眼睛的人。】"></a>某天，有个旅行者到了这个岛上。由于不知道这里的规矩，所以他在和全岛人一起狂欢的时候，不留神就说了一句话：【你们这里有红眼睛的人。】</h5><h5 id="假设这个岛上的人足够聪明，每个人都可以做出缜密的逻辑推理。请问这个岛上将会发生什么？"><a href="#假设这个岛上的人足够聪明，每个人都可以做出缜密的逻辑推理。请问这个岛上将会发生什么？" class="headerlink" title="假设这个岛上的人足够聪明，每个人都可以做出缜密的逻辑推理。请问这个岛上将会发生什么？"></a>假设这个岛上的人足够聪明，每个人都可以做出缜密的逻辑推理。请问这个岛上将会发生什么？</h5>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Install ActiveMQ</title>
      <link href="/2018/10/22/Windows%20Install%20ActiveMQ/"/>
      <url>/2018/10/22/Windows%20Install%20ActiveMQ/</url>
      
        <content type="html"><![CDATA[<h5 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h5><p><strong><a href="http://activemq.apache.org/download.html" title="ActiveMQ下载地址">ActiveMQ下载地址</a></strong></p><h5 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="2.解压安装"></a>2.解压安装</h5><p>使用解压工具对压缩包进行解压<br><img src="/images/post/activeMQ.JPG"></p><h5 id="3-单节点启动"><a href="#3-单节点启动" class="headerlink" title="3.单节点启动"></a>3.单节点启动</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\win64\activemq.bat</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8161/admin">http://localhost:8161/admin</a><br>用户名:admin<br>密码:admin</p><h5 id="4-集群启动"><a href="#4-集群启动" class="headerlink" title="4.集群启动"></a>4.集群启动</h5><ul><li>zookeeper集群启动 (<strong><a href="http://zhangzhixing.win/2018/10/17/Windows%20Install%20ZooKeeper/" title="Windows Install ZooKeeper">Windows Install ZooKeeper</a></strong>)</li><li>activemq.xml配置  (本文配置三台机器) <span id="more"></span>  </li></ul><p>Master/Slave配置<br>node1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;persistenceAdapter&gt;</span><br><span class="line">    &lt;!-- &lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt; --&gt;</span><br><span class="line">    &lt;replicatedLevelDB</span><br><span class="line">        directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</span><br><span class="line">        replicas=&quot;3&quot;</span><br><span class="line">        bind=&quot;tcp://0.0.0.0:62621&quot;</span><br><span class="line">        zkAddress=&quot;localhost:2181,localhost:2182,localhost:2183&quot;</span><br><span class="line">        hostname=&quot;localhost&quot;</span><br><span class="line">        sync=&quot;local_disk&quot;</span><br><span class="line">        zkPath=&quot;/activemq/leveldb-stores&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/persistenceAdapter&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\win64\activemq.bat</span><br></pre></td></tr></table></figure><p>node2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;persistenceAdapter&gt;</span><br><span class="line">    &lt;!-- &lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt; --&gt;</span><br><span class="line">    &lt;replicatedLevelDB</span><br><span class="line">        directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</span><br><span class="line">        replicas=&quot;3&quot;</span><br><span class="line">        bind=&quot;tcp://0.0.0.0:62622&quot;</span><br><span class="line">        zkAddress=&quot;localhost:2181,localhost:2182,localhost:2183&quot;</span><br><span class="line">        hostname=&quot;localhost&quot;</span><br><span class="line">        sync=&quot;local_disk&quot;</span><br><span class="line">        zkPath=&quot;/activemq/leveldb-stores&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/persistenceAdapter&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\win64\activemq.bat</span><br></pre></td></tr></table></figure><p>node3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;persistenceAdapter&gt;</span><br><span class="line">    &lt;!-- &lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt; --&gt;</span><br><span class="line">    &lt;replicatedLevelDB</span><br><span class="line">        directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</span><br><span class="line">        replicas=&quot;3&quot;</span><br><span class="line">        bind=&quot;tcp://0.0.0.0:62623&quot;</span><br><span class="line">        zkAddress=&quot;localhost:2181,localhost:2182,localhost:2183&quot;</span><br><span class="line">        hostname=&quot;localhost&quot;</span><br><span class="line">        sync=&quot;local_disk&quot;</span><br><span class="line">        zkPath=&quot;/activemq/leveldb-stores&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/persistenceAdapter&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\win64\activemq.bat</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Install Kafka</title>
      <link href="/2018/10/17/Windows%20Install%20Kafka/"/>
      <url>/2018/10/17/Windows%20Install%20Kafka/</url>
      
        <content type="html"><![CDATA[<h5 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h5><p><strong><a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.0.0/kafka-2.0.0-src.tgz" title="kafka下载地址">kafka下载地址</a></strong></p><h5 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="2.解压安装"></a>2.解压安装</h5><p>使用解压工具对压缩包进行解压<br><img src="/images/post/kafka.JPG"></p><h5 id="3-配置参数"><a href="#3-配置参数" class="headerlink" title="3.配置参数"></a>3.配置参数</h5><ul><li>配置参数  </li></ul><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">broker.id=0</span><br><span class="line">#listeners=PLAINTEXT://:9092</span><br><span class="line">#advertised.listeners=PLAINTEXT://your.host.name:9092</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line"># log存放位置</span><br><span class="line">log.dirs=F:\\kafka_2.12-2.0.0\\logs</span><br><span class="line">num.partitions=1</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">#log.flush.interval.messages=10000</span><br><span class="line">#log.flush.interval.ms=1000</span><br><span class="line">log.retention.hours=168</span><br><span class="line">#log.retention.bytes=1073741824</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"># 连接zookeeper集群地址</span><br><span class="line">zookeeper.connect=localhost:2181,localhost:2182,localhost:2183</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br></pre></td></tr></table></figure><h5 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h5><h6 id="启动Server"><a href="#启动Server" class="headerlink" title="启动Server:"></a>启动Server:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\kafka-server-start.bat server.properties</span><br></pre></td></tr></table></figure><h6 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test3</span><br></pre></td></tr></table></figure><h6 id="查看topic"><a href="#查看topic" class="headerlink" title="查看topic"></a>查看topic</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\windows\kafka-topics.bat --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure><h6 id="producer启动"><a href="#producer启动" class="headerlink" title="producer启动"></a>producer启动</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure><h6 id="consumer启动"><a href="#consumer启动" class="headerlink" title="consumer启动"></a>consumer启动</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\kafka_2.12-2.0.0\bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test  --from-beginning</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/kafka" title="kafka源码地址​github.com">kafka源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Install ZooKeeper</title>
      <link href="/2018/10/17/Windows%20Install%20ZooKeeper/"/>
      <url>/2018/10/17/Windows%20Install%20ZooKeeper/</url>
      
        <content type="html"><![CDATA[<p>笔者认为只要能在Windows下运行的项目，在MacOS、Linux出现问题的概率会很小，所以此次选择在Windows环境下安装运行zookeeper项目。</p><h5 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h5><p><strong><a href="https://www.apache.org/dyn/closer.cgi/zookeeper/" title="ZooKeeper下载地址">ZooKeeper下载地址</a></strong></p><h5 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="2.解压安装"></a>2.解压安装</h5><p>使用解压工具对压缩包进行解压<br><img src="/images/post/zookeeper.JPG"></p><h5 id="3-配置参数"><a href="#3-配置参数" class="headerlink" title="3.配置参数"></a>3.配置参数</h5><ul><li>进入conf文件夹</li><li>复制zoo_sample.cfg文件为zoo.cfg</li><li>配置参数  <span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 服务器客户端心跳间隔（毫秒）</span><br><span class="line">tickTime=2000</span><br><span class="line"># 初始化连接忍受多少个tickTime时间间隔</span><br><span class="line">initLimit=10</span><br><span class="line"># leader与follower发送消息，请求应答时间，不能超过多少个tickTime</span><br><span class="line">syncLimit=5</span><br><span class="line"># 数据存放位置</span><br><span class="line">dataDir=F:\\zookeeper-3.4.13\\data</span><br><span class="line"># 日志存放位置</span><br><span class="line">dataLogDir=F:\\zookeeper-3.4.13\\log</span><br><span class="line"># 开启端口号</span><br><span class="line">clientPort=2181</span><br><span class="line"># server.X=A:B:C X-代表服务器编号 A-代表ip B和C-代表端口，这个端口用来系统之间通信</span><br><span class="line"># 配置集群 需要在dataDir文件内增加myid文件，文件内容为相应服务器编号</span><br><span class="line">server.1=localhost:2888:3888</span><br><span class="line">server.2=localhost:2889:3889</span><br><span class="line">server.3=localhost:2890:3890</span><br></pre></td></tr></table></figure><h5 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h5><h6 id="Server"><a href="#Server" class="headerlink" title="Server:"></a>Server:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.cmd</span><br></pre></td></tr></table></figure><h6 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkCli.cmd</span><br></pre></td></tr></table></figure><h5 id="5-授权管理"><a href="#5-授权管理" class="headerlink" title="5.授权管理"></a>5.授权管理</h5><h6 id="ZOOKEEPER权限分为"><a href="#ZOOKEEPER权限分为" class="headerlink" title="ZOOKEEPER权限分为:"></a>ZOOKEEPER权限分为:</h6></li><li>CREATE: 你可以创建子节点。</li><li>READ: 你可以获取节点数据以及当前节点的子节点列表。</li><li>WRITE: 你可以为节点设置数据。</li><li>DELETE: 你可以删除子节点。</li><li>ADMIN: 可以为节点设置权限。  </li></ul><h6 id="CreateMode节点创建方式"><a href="#CreateMode节点创建方式" class="headerlink" title="CreateMode节点创建方式"></a>CreateMode节点创建方式</h6><ul><li>PERSISTENT：客户端与zookeeper断开连接后，该节点依旧存在</li><li>PERSISTENT_SEQUENTIAL：客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号</li><li>EPHEMERAL：客户端与zookeeper断开连接后，该节点被删除</li><li>EPHEMERAL_SEQUENTIAL：客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号  </li></ul><h6 id="ZOOKEEPER命令"><a href="#ZOOKEEPER命令" class="headerlink" title="ZOOKEEPER命令:"></a>ZOOKEEPER命令:</h6><p>创建node</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create /acl acl</span><br></pre></td></tr></table></figure><p>查看节点列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></table></figure><p>查看节点信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /</span><br></pre></td></tr></table></figure><p>设置节点信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set / info</span><br></pre></td></tr></table></figure><p>删除节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete /</span><br></pre></td></tr></table></figure><p>通过setAcl设置用户名和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setAcl path digest:username:base64(sha1(password)):crwda</span><br><span class="line">setAcl /acl digest:zookeeper:4lvlzsipXVaEhXMd+2qMrLc0at8=:r</span><br></pre></td></tr></table></figure><p>认证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addauth digest username:password</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/zookeeper" title="zookeeper源码地址​github.com">zookeeper源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）JAVA NIO SELECTOR</title>
      <link href="/2018/09/12/%EF%BC%88%E4%B8%89%EF%BC%89JAVA%20NIO%20SELECTOR/"/>
      <url>/2018/09/12/%EF%BC%88%E4%B8%89%EF%BC%89JAVA%20NIO%20SELECTOR/</url>
      
        <content type="html"><![CDATA[<h4 id="Selector（选择器）是Java-NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。"><a href="#Selector（选择器）是Java-NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。" class="headerlink" title="Selector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。"></a>Selector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。</h4><p>SelectServer.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class SelectServer &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.socket().bind(new InetSocketAddress(9999));</span><br><span class="line">        serverSocketChannel.configureBlocking(false);</span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        SelectionKey selectionKey = serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            int select = selector.select();</span><br><span class="line">            if (select &gt; 0) &#123;</span><br><span class="line">                Iterator keyIterator = selector.selectedKeys().iterator();</span><br><span class="line">                while (keyIterator.hasNext()) &#123;</span><br><span class="line">                    SelectionKey next = (SelectionKey) keyIterator.next();</span><br><span class="line">                    keyIterator.remove();</span><br><span class="line">                    if (next.isAcceptable()) &#123;</span><br><span class="line">                        System.out.println(&quot;isAcceptable&quot;);</span><br><span class="line">                        SocketChannel channel = ((ServerSocketChannel) next.channel()).accept();</span><br><span class="line">                        channel.configureBlocking(false);</span><br><span class="line">                        channel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    &#125; else if (next.isConnectable()) &#123;</span><br><span class="line">                        System.out.println(&quot;connect&quot;);</span><br><span class="line">                    &#125; else if (next.isReadable()) &#123;</span><br><span class="line">                        System.out.println(&quot;isReadable&quot;);</span><br><span class="line">                        SocketChannel socketChannel = (SocketChannel) next.channel();</span><br><span class="line">                        ByteBuffer readByteBuffer = ByteBuffer.allocate(100);</span><br><span class="line">                        int read = socketChannel.read(readByteBuffer);</span><br><span class="line">                        System.out.println(new String(readByteBuffer.array(), 0, read));</span><br><span class="line">                        socketChannel.register(selector, SelectionKey.OP_WRITE);</span><br><span class="line">                        socketChannel.write(readByteBuffer);</span><br><span class="line">                    &#125; else if (next.isWritable()) &#123;</span><br><span class="line">                        System.out.println(&quot;isWritable&quot;);</span><br><span class="line">                        SocketChannel socketChannel = (SocketChannel) next.channel();</span><br><span class="line">                        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>NioChannelClient.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class NioChannelClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(new InetSocketAddress(&quot;localhost&quot;, 9999));</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            Scanner input = new Scanner(System.in);</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(input.nextLine().getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/nio" title="Nio源码地址​github.com">Nio源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Nio </tag>
            
            <tag> Selector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）JAVA NIO CHANNEL</title>
      <link href="/2018/09/11/%EF%BC%88%E4%BA%8C%EF%BC%89JAVA%20NIO%20CHANNEL/"/>
      <url>/2018/09/11/%EF%BC%88%E4%BA%8C%EF%BC%89JAVA%20NIO%20CHANNEL/</url>
      
        <content type="html"><![CDATA[<h4 id="FileChannel-从文件中读写数据。"><a href="#FileChannel-从文件中读写数据。" class="headerlink" title="FileChannel 从文件中读写数据。"></a>FileChannel 从文件中读写数据。</h4><p>FileChannelTest.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class FileChannelTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileChannel inputFileChannel = new FileInputStream(&quot;file.text absolute path&quot;).getChannel();</span><br><span class="line">        ByteBuffer readBuffer = ByteBuffer.allocate(100);</span><br><span class="line">        inputFileChannel.read(readBuffer);</span><br><span class="line">        readBuffer.flip();</span><br><span class="line">        for (int i = 0; i &lt; readBuffer.limit(); i++) &#123;</span><br><span class="line">            System.out.println((char) readBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileChannel outputFileChannel = new FileOutputStream(&quot;file.text absolute path&quot;, true).getChannel();</span><br><span class="line">        ByteBuffer writeBuffer = ByteBuffer.wrap(&quot;TOM&quot;.getBytes());</span><br><span class="line">        outputFileChannel.write(writeBuffer);</span><br><span class="line"></span><br><span class="line">        inputFileChannel.close();</span><br><span class="line">        outputFileChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="DatagramChannel-能通过UDP读写网络中的数据。"><a href="#DatagramChannel-能通过UDP读写网络中的数据。" class="headerlink" title="DatagramChannel 能通过UDP读写网络中的数据。"></a>DatagramChannel 能通过UDP读写网络中的数据。</h4><p>DatagramChannelServer.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class DatagramChannelServer &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        DatagramChannel channel = DatagramChannel.open();</span><br><span class="line">        channel.socket().bind(new InetSocketAddress(9999));</span><br><span class="line"></span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(48);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            channel.receive(buf);</span><br><span class="line">            buf.flip();</span><br><span class="line">            for (int i = 0; i &lt; buf.limit(); i++) &#123;</span><br><span class="line">                System.out.println((char) buf.get());</span><br><span class="line">            &#125;</span><br><span class="line">            buf.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DatagramChannelClient.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class DatagramChannelClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        DatagramChannel channel = DatagramChannel.open();</span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(48);</span><br><span class="line">        buf = buf.wrap(&quot;AA&quot;.getBytes());</span><br><span class="line">        channel.send(buf, new InetSocketAddress(&quot;localhost&quot;, 9999));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ServerSocketChannel-可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。"><a href="#ServerSocketChannel-可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。" class="headerlink" title="ServerSocketChannel 可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。"></a>ServerSocketChannel 可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。</h4><h4 id="SocketChannel-能通过TCP读写网络中的数据。"><a href="#SocketChannel-能通过TCP读写网络中的数据。" class="headerlink" title="SocketChannel 能通过TCP读写网络中的数据。"></a>SocketChannel 能通过TCP读写网络中的数据。</h4><p>NioChannelServer.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class NioChannelServer &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.socket().bind(new InetSocketAddress(9999));</span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(48);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            SocketChannel channel = serverSocketChannel.accept();</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                channel.read(buf);</span><br><span class="line">                buf.flip();</span><br><span class="line">                for (int i = 0; i &lt; buf.limit(); i++) &#123;</span><br><span class="line">                    System.out.println((char) buf.get());</span><br><span class="line">                &#125;</span><br><span class="line">                buf.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NioChannelClient.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class NioChannelClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(new InetSocketAddress(&quot;localhost&quot;, 9999));</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            Scanner input = new Scanner(System.in);</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(input.nextLine().getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/nio" title="Nio源码地址​github.com">Nio源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Nio </tag>
            
            <tag> Channel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）JAVA NIO BUFFER</title>
      <link href="/2018/09/10/%EF%BC%88%E4%B8%80%EF%BC%89JAVA%20NIO%20BUFFER/"/>
      <url>/2018/09/10/%EF%BC%88%E4%B8%80%EF%BC%89JAVA%20NIO%20BUFFER/</url>
      
        <content type="html"><![CDATA[<h6 id="1-变量："><a href="#1-变量：" class="headerlink" title="1.变量："></a>1.变量：</h6><p>capacity： 指定了可以存储在缓冲区中的最大数据容量，实际上，它指定了底层数组的大小，或者至少是指定了准许我们使用的底层数组的容量。<br>position： 下一次读取或写入的位置。（每次调用get put方法+1）<br>limit：指定还有多少数据需要取出，或者还有多少空间可以放入数据。（每次调用get put方法时候，通过position与limit对比）</p><h6 id="2-方法："><a href="#2-方法：" class="headerlink" title="2.方法："></a>2.方法：</h6><p>get：position + 1<br>put：position + 1<br>flip：limit = position position = 0 mark = -1<br>clear：limit = capacity position = 0 mark = -1<br>mark： mark = position<br>reset：position = m;<br>duplicate：浅拷贝（每个缓存区的上界、容量、位置等属性是各自独立的）</p><span id="more"></span><h6 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h6><p>BufferTest.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">public class BufferTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        IntBuffer buff = IntBuffer.allocate(10);</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(1);</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(2);</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(3);</span><br><span class="line">        buff.mark();</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(4);</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(5);</span><br><span class="line">        System.out.println(&quot; ========== init ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + buff.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + buff.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + buff.position());</span><br><span class="line">        System.out.println();</span><br><span class="line">        buff.reset();</span><br><span class="line">        System.out.println(&quot; ========== mark reset ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + buff.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + buff.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + buff.position());</span><br><span class="line">        System.out.println();</span><br><span class="line">        buff.flip();</span><br><span class="line">        System.out.println(&quot; ========== flip ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + buff.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + buff.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + buff.position());</span><br><span class="line">        for (int i = 0; i &lt; buff.limit(); i++) &#123;</span><br><span class="line">            System.out.print(buff.get() + &quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println();</span><br><span class="line">        buff.clear();</span><br><span class="line">        System.out.println(&quot; ========== clear ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + buff.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + buff.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + buff.position());</span><br><span class="line">        for (int i = 0; i &lt; buff.limit(); i++) &#123;</span><br><span class="line">            System.out.print(buff.get() + &quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        //重新数据初始化</span><br><span class="line">        System.out.println(&quot; ========== duplicate ========== &quot;);</span><br><span class="line">        buff.clear();</span><br><span class="line">        IntBuffer copyIntBuffer = buff.duplicate();</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(2);</span><br><span class="line">        System.out.println(&quot; ========== buff duplicate ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + buff.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + buff.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + buff.position());</span><br><span class="line">        System.out.println(buff);</span><br><span class="line">        System.out.println(&quot; ========== copyIntBuffer duplicate ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + copyIntBuffer.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + copyIntBuffer.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + copyIntBuffer.position());</span><br><span class="line">        for (int i = 0; i &lt; buff.limit(); i++) &#123;</span><br><span class="line">            System.out.print(copyIntBuffer.get() + &quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-Console"><a href="#4-Console" class="headerlink" title="4.Console"></a>4.Console</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> ========== init ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:10</span><br><span class="line">position:10</span><br><span class="line"></span><br><span class="line"> ========== mark reset ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:10</span><br><span class="line">position:6</span><br><span class="line"></span><br><span class="line"> ========== flip ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:6</span><br><span class="line">position:0</span><br><span class="line">010203</span><br><span class="line"></span><br><span class="line"> ========== clear ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:10</span><br><span class="line">position:0</span><br><span class="line">0102030405</span><br><span class="line"></span><br><span class="line"> ========== duplicate ========== </span><br><span class="line"> ========== buff duplicate ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:10</span><br><span class="line">position:2</span><br><span class="line">java.nio.HeapIntBuffer[pos=2 lim=10 cap=10]</span><br><span class="line"> ========== copyIntBuffer duplicate ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:10</span><br><span class="line">position:0</span><br><span class="line">0202030405</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/nio" title="Nio源码地址​github.com">Nio源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Nio </tag>
            
            <tag> Buffer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ五种模式(TOPICS模式)</title>
      <link href="/2018/09/09/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-TOPICS%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/09/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-TOPICS%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/post/topics.jpg"></p><p>Send.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Send &#123;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_topic&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, &quot;topic&quot;);</span><br><span class="line">        String message = &quot;message&quot;;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, &quot;item.broadcast&quot;, null, message.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>Recv.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class Recv &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_topic_1&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_topic&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;item.broadcast&quot;);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;item.a&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &#x27;&quot; + message + &quot;&#x27;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recv2.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class Recv2 &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_topic_2&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_topic&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;item.broadcast&quot;);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;item.b&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &#x27;&quot; + message + &quot;&#x27;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;java&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version = &#x27;0.0.1-SNAPSHOT&#x27;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &#x27;com.rabbitmq&#x27;, name: &#x27;amqp-client&#x27;, version: &#x27;5.3.0&#x27;</span><br><span class="line">    testCompile group: &#x27;junit&#x27;, name: &#x27;junit&#x27;, version: &#x27;4.12&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/rabbit-mq" title="rabbit-mq源码地址​github.com">rabbit-mq源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ五种模式(ROUTING模式)</title>
      <link href="/2018/09/08/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-ROUTING%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/08/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-ROUTING%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/post/routing.jpg"></p><p>Send.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Send &#123;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_direct&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, &quot;direct&quot;);</span><br><span class="line">        String message = &quot;message&quot;;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, &quot;insert&quot;, null, message.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>Recv.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class Recv &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_direct_1&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_direct&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;update&quot;);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;delete&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &#x27;&quot; + message + &quot;&#x27;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recv2.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Recv2 &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_direct_2&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_direct&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;insert&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &#x27;&quot; + message + &quot;&#x27;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;java&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version = &#x27;0.0.1-SNAPSHOT&#x27;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &#x27;com.rabbitmq&#x27;, name: &#x27;amqp-client&#x27;, version: &#x27;5.3.0&#x27;</span><br><span class="line">    testCompile group: &#x27;junit&#x27;, name: &#x27;junit&#x27;, version: &#x27;4.12&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/rabbit-mq" title="rabbit-mq源码地址​github.com">rabbit-mq源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ五种模式(P/S模式)</title>
      <link href="/2018/09/07/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-P-S%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/07/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-P-S%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/post/ps.jpg"></p><p>Send.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Send &#123;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_fanout&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, &quot;fanout&quot;);</span><br><span class="line">        String message = &quot;message&quot;;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, &quot;&quot;, null, message.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>Recv.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Recv &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_ps_1&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_fanout&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &#x27;&quot; + message + &quot;&#x27;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recv2.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Recv2 &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_ps_2&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_fanout&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &#x27;&quot; + message + &quot;&#x27;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;java&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version = &#x27;0.0.1-SNAPSHOT&#x27;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &#x27;com.rabbitmq&#x27;, name: &#x27;amqp-client&#x27;, version: &#x27;5.3.0&#x27;</span><br><span class="line">    testCompile group: &#x27;junit&#x27;, name: &#x27;junit&#x27;, version: &#x27;4.12&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/rabbit-mq" title="rabbit-mq源码地址​github.com">rabbit-mq源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Socket</title>
      <link href="/2018/09/06/Java%20Socket/"/>
      <url>/2018/09/06/Java%20Socket/</url>
      
        <content type="html"><![CDATA[<p>Server.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocket serverSocket = new ServerSocket(8081);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            Socket socket = serverSocket.accept();</span><br><span class="line">            new Thread(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class="line">                        String str = &quot;&quot;;</span><br><span class="line">                        while ((str = bufferedReader.readLine()) != null) &#123;</span><br><span class="line">                            if (str.equals(&quot;1&quot;)) &#123;</span><br><span class="line">                                Thread.sleep(5 * 1000);</span><br><span class="line">                            &#125;</span><br><span class="line">                            System.out.println(str);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; catch (IOException | InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Socket socket = new Socket(&quot;localhost&quot;, 8081);</span><br><span class="line">        BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));</span><br><span class="line">        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in, &quot;UTF-8&quot;));</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            String str = bufferedReader.readLine();</span><br><span class="line">            bufferedWriter.write(str);</span><br><span class="line">            bufferedWriter.write(&quot;\n&quot;);</span><br><span class="line">            bufferedWriter.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/socket" title="Java Socket源码地址​github.com">Java Socket源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ五种模式(WORK模式)</title>
      <link href="/2018/09/06/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-WORK%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/06/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-WORK%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/post/work.jpg"><br>Send.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class Send &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        for (int i = 0; i &lt; 50; i++) &#123;</span><br><span class="line">            String message = &quot;message:\t&quot; + i;</span><br><span class="line">            channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, message.getBytes());</span><br><span class="line">            System.out.println(message);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(i * 10);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>Recv.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Recv &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &#x27;&quot; + message + &quot;&#x27;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recv2.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Recv2 &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &#x27;&quot; + message + &quot;&#x27;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(10);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;java&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version = &#x27;0.0.1-SNAPSHOT&#x27;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &#x27;com.rabbitmq&#x27;, name: &#x27;amqp-client&#x27;, version: &#x27;5.3.0&#x27;</span><br><span class="line">    testCompile group: &#x27;junit&#x27;, name: &#x27;junit&#x27;, version: &#x27;4.12&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/rabbit-mq" title="rabbit-mq源码地址​github.com">rabbit-mq源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ五种模式(SIMPLE模式)</title>
      <link href="/2018/09/05/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-SIMPLE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/05/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-SIMPLE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/post/simple.jpg"></p><p>Send.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Send &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        String message = &quot;message&quot;;</span><br><span class="line">        channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, message.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>Recv.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class Recv &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &#x27;&quot; + message + &quot;&#x27;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, true, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;java&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version = &#x27;0.0.1-SNAPSHOT&#x27;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &#x27;com.rabbitmq&#x27;, name: &#x27;amqp-client&#x27;, version: &#x27;5.3.0&#x27;</span><br><span class="line">    testCompile group: &#x27;junit&#x27;, name: &#x27;junit&#x27;, version: &#x27;4.12&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/rabbit-mq" title="rabbit-mq源码地址​github.com">rabbit-mq源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置ssl证书</title>
      <link href="/2018/09/04/Nginx%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/"/>
      <url>/2018/09/04/Nginx%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    ssl_certificate      /SSLPATH/zhang.crt;</span><br><span class="line">    ssl_certificate_key  /SSLPATH/zhang.key;</span><br><span class="line">    location / &#123;</span><br><span class="line">        # TOMCAT</span><br><span class="line">        proxy_pass http://localhost:5566;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://www.jianshu.com/p/75f8be79a421" title="OPENSSL 自签证书">OPENSSL 自签证书</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openssl 自签证书</title>
      <link href="/2018/09/04/Openssl%20%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6/"/>
      <url>/2018/09/04/Openssl%20%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-（-key）文件"><a href="#1-（-key）文件" class="headerlink" title="1.（.key）文件"></a>1.（.key）文件</h2><p>通常指私钥。</p><p>openssl genrsa -des3 -out zhang.key 1024</p><h2 id="2-（-csr）文件"><a href="#2-（-csr）文件" class="headerlink" title="2.（.csr）文件"></a>2.（.csr）文件</h2><p>csr 是Certificate Signing Request的缩写，即证书签名请求，这不是证书，可以简单理解成公钥，生成证书时要把这个提交给权威的证书颁发机构。</p><p>openssl req -new -key zhang.key -out zhang.csr</p><span id="more"></span><h2 id="3-（-crt）"><a href="#3-（-crt）" class="headerlink" title="3.（.crt）"></a>3.（.crt）</h2><p>crt 即 certificate的缩写，即证书。</p><p>openssl x509 -req -days 365 -in zhang.csr -signkey zhang.key -out zhang.crt</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Https</title>
      <link href="/2018/09/03/Https/"/>
      <url>/2018/09/03/Https/</url>
      
        <content type="html"><![CDATA[<h2 id="1-HTTP-应用层协议"><a href="#1-HTTP-应用层协议" class="headerlink" title="1.HTTP 应用层协议"></a>1.HTTP 应用层协议</h2><p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。</p><h2 id="2-SSL-TLS-会话层协议"><a href="#2-SSL-TLS-会话层协议" class="headerlink" title="2.SSL/TLS 会话层协议"></a>2.SSL/TLS 会话层协议</h2><p>SSL：（Secure Socket Layer，安全套接字层），位于可靠的面向连接的网络层协议和应用层协议之间的一种协议层。SSL通过互相认证、使用数字签名确保完整性、使用加密确保私密性，以实现客户端和服务器之间的安全通讯。该协议由两层组成：SSL记录协议和SSL握手协议。</p><span id="more"></span><p>TLS：(Transport Layer Security，传输层安全协议)，用于两个应用程序之间提供保密性和数据完整性。该协议由两层组成：TLS记录协议和TLS握手协议。</p><p>SSL是Netscape开发的专门用户保护Web通讯的，目前版本为3.0。最新版本的TLS 1.0是IETF(工程任务组)制定的一种新的协议，它建立在SSL 3.0协议规范之上，是SSL 3.0的后续版本。两者差别极小，可以理解为SSL 3.1，它是写入了RFC的。</p><h2 id="3-对称加密非对称加密"><a href="#3-对称加密非对称加密" class="headerlink" title="3.对称加密非对称加密"></a>3.对称加密非对称加密</h2><p>对称加密技术:“加密”和“解密”密钥相同</p><p>非对称加密技术“加密”和“解密”密钥不相同</p><h2 id="4-TPC-IP-传输层协议"><a href="#4-TPC-IP-传输层协议" class="headerlink" title="4.TPC/IP 传输层协议"></a>4.TPC/IP 传输层协议</h2><p>这层的功能包括是否选择差错恢复协议还是无差错恢复协议，及在同一主机上对不同应用的数据流的输入进行复用，还包括对收到的顺序不对的数据包的重新排序功能。</p><p>HTTPS=HTTP+SSL/TLS</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http Session</title>
      <link href="/2018/08/31/Http%20Session/"/>
      <url>/2018/08/31/Http%20Session/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Cookie简介"><a href="#1-Cookie简介" class="headerlink" title="1.Cookie简介"></a>1.Cookie简介</h2><p>Cookie 是在 HTTP 协议下，服务器或脚本可以维护客户工作站上信息的一种方式。Cookie 是由 Web 服务器保存在用户浏览器（客户端）上的小文本文件，它可以包含有关用户的信息。无论何时用户链接到服务器，Web 站点都可以访问 Cookie 信息。</p><p>目前有些 Cookie 是临时的，有些则是持续的。临时的 Cookie 只在浏览器上保存一段规定的时间，一旦超过规定的时间，该 Cookie 就会被系统清除。</p><p>持续的 Cookie 则保存在用户的 Cookie 文件中，下一次用户返回时，仍然可以对它进行调用。在 Cookie 文件中保存 Cookie，有些用户担心 Cookie 中的用户信息被一些别有用心的人窃取，而造成一定的损害。其实，网站以外的用户无法跨过网站来获得 Cookie 信息。如果因为这种担心而屏蔽 Cookie，肯定会因此拒绝访问许多站点页面。因为，当今有许多 Web 站点开发人员使用 Cookie 技术，例如 Session 对象的使用就离不开 Cookie 的支持。</p><span id="more"></span><h2 id="2-Session简介"><a href="#2-Session简介" class="headerlink" title="2.Session简介"></a>2.Session简介</h2><p>Session 是 用于保持状态的基于 Web服务器的方法。Session 允许通过将对象存储在 Web服务器的内存中在整个用户会话过程中保持任何对象。</p><h2 id="3-实例代码"><a href="#3-实例代码" class="headerlink" title="3.实例代码"></a>3.实例代码</h2><p>SessionServlet.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;/session&quot;)</span><br><span class="line"></span><br><span class="line">public class SessionServletextends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">req.setAttribute(&quot;sessionID&quot;, req.getSession().getId());</span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(&quot;session.jsp&quot;).forward(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Session.jsp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;requestScope.sessionID&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;war&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version &#x27;0.0.1&#x27;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &#x27;javax.servlet&#x27;, name: &#x27;javax.servlet-api&#x27;, version: &#x27;4.0.1&#x27;</span><br><span class="line">    testCompile group: &#x27;junit&#x27;, name: &#x27;junit&#x27;, version: &#x27;4.11&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/OomelodyoO/Learn/tree/master/http-session" title="http-session源码地址​github.com">http-session源码地址​github.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是广义，什么是狭义</title>
      <link href="/2018/02/23/%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%BF%E4%B9%89%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E7%8B%AD%E4%B9%89/"/>
      <url>/2018/02/23/%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%BF%E4%B9%89%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E7%8B%AD%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>广义：就是不渉及具体概念，只是一个框架，其有确定的抽象概念，但没有确定的形象概念。<br>狭义：就是在系统中设定或区分某一相对狭窄的、片面的、局部的点、面、区域、系统，主要指某一物质系统中具有特殊的、有别于一般的、非普遍的部分。相对广义而言。<br>广义包含狭义，例如：狭义上咱俩都是人，广义上咱俩都是动物。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 广义 </tag>
            
            <tag> 狭义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS Install Mysql</title>
      <link href="/2018/02/13/CentOS%20Install%20Mysql/"/>
      <url>/2018/02/13/CentOS%20Install%20Mysql/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.http://dev.mysql.com/downloads/repo/yum/ 地址下载相对应rpm包</span><br><span class="line">2.rpm -ivh mysql57-community-release-el7-8.noarch.rpm (此时/etc/yum.reps.d/下已经有mysql地址源)</span><br><span class="line">3.yum makecache</span><br><span class="line">4.yum list | grep mysql(查询mysql-server)</span><br><span class="line">5.yum install mysql-community-server.x86_64 进行安装</span><br><span class="line">6.service mysqld restart</span><br><span class="line">7.cat /var/log/mysqld.log | grep password</span><br><span class="line">8.vi /etc/my.cnf ([mysqld] 下增加 validate-password=OFF 关闭密码长度等机制)</span><br><span class="line">9.systemctl restart mysqld.service (重启服务)</span><br><span class="line">10.mysql -uroot -p (登录mysql)</span><br><span class="line">11.SET PASSWORD = PASSWORD(&#x27;root&#x27;);</span><br><span class="line">    ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; PASSWORD EXPIRE NEVER;</span><br><span class="line">    flush privileges;</span><br><span class="line">12.</span><br><span class="line">client端用户命令：</span><br><span class="line">GRANT ALL ON *.* TO root@&#x27;%&#x27; IDENTIFIED BY &#x27;root&#x27; WITH GRANT OPTION;</span><br><span class="line">(GRANT &lt;privileges&gt; ON &lt;what&gt; TO &lt;user&gt; [IDENTIFIED BY &quot;&lt;password&gt;&quot;] [WITH GRANT OPTION];)</span><br><span class="line">(</span><br><span class="line">打开MYSQL:service mysqld start</span><br><span class="line">关闭MYSQL:service mysqld stop</span><br><span class="line">)</span><br><span class="line">13.firewall-cmd --zone=public --add-port=3306/tcp --permanent (防火墙)</span><br><span class="line">    systemctl stop firewalld</span><br><span class="line">    systemctl start firewalld</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS Install ShadowSocks</title>
      <link href="/2018/02/13/CentOS%20Install%20ShadowSocks/"/>
      <url>/2018/02/13/CentOS%20Install%20ShadowSocks/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel</span><br><span class="line">yum install gcc</span><br><span class="line">yum install openssl-devel</span><br><span class="line"></span><br><span class="line">wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz</span><br><span class="line">xz -d Python-2.7.12.tar.xz &amp; tar xvf Python-2.7.12.tar</span><br><span class="line">tar xvf Python-2.7.12.tar</span><br><span class="line">cd Python-2.7.12</span><br><span class="line">./configure --with-zlib=/usr/include</span><br><span class="line">make &amp;&amp; make altinstall</span><br><span class="line">cd /usr/bin</span><br><span class="line">mv python python_bak</span><br><span class="line">ln -s /usr/local/bin/python2.7 ./python</span><br><span class="line">vi yum</span><br><span class="line">cd</span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line">yum install m2crypto</span><br><span class="line">cd</span><br><span class="line">wget https://download.libsodium.org/libsodium/releases/libsodium-1.0.11.tar.gz</span><br><span class="line">tar -xvf libsodium-1.0.11.tar.gz</span><br><span class="line">cd libsodium-1.0.11</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">echo /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf</span><br><span class="line">ldconfig</span><br><span class="line"></span><br><span class="line">ssserver -c config -d start</span><br><span class="line">ssserver -c config -d stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> ShadowSocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS Install Redis</title>
      <link href="/2018/02/08/CentOS%20Install%20Redis/"/>
      <url>/2018/02/08/CentOS%20Install%20Redis/</url>
      
        <content type="html"><![CDATA[<p>已安装GCC<br><a href="http://redis.io/download">REDIS下载地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.2.3.tar.gz</span><br><span class="line">tar xzf redis-3.2.3.tar.gz</span><br><span class="line">cd redis-3.2.3</span><br><span class="line">&lt;make (致命错误：jemalloc/jemalloc.h：没有那个文件或目录)&gt;</span><br><span class="line">make MALLOC=libc</span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line">    systemctl stop firewalld</span><br><span class="line">    systemctl start firewalld</span><br></pre></td></tr></table></figure><span id="more"></span><p>redis.conf 末尾增加bing 0.0.0.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br><span class="line">redis-cli -h xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Pip Requirements</title>
      <link href="/2018/02/08/Python%20Pip%20Requirements/"/>
      <url>/2018/02/08/Python%20Pip%20Requirements/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//导出requirements</span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line">//导入requirements</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS Install Nginx</title>
      <link href="/2018/02/07/CentOS%20Install%20Nginx/"/>
      <url>/2018/02/07/CentOS%20Install%20Nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="1-INSTALL"><a href="#1-INSTALL" class="headerlink" title="1.INSTALL"></a>1.INSTALL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 http://nginx.org/en/linux_packages.html##stable</span><br><span class="line">2.cd /etc/yum.repos.d/</span><br><span class="line">3.nginx.repo</span><br><span class="line">4.yum makecache</span><br><span class="line">5.yum install nginx.x86_64</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="2-USE"><a href="#2-USE" class="headerlink" title="2.USE"></a>2.USE</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start: nginx</span><br><span class="line">stop: nginx -s stop</span><br><span class="line">reload: nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Data Backup</title>
      <link href="/2018/02/07/Mysql%20Data%20Backup/"/>
      <url>/2018/02/07/Mysql%20Data%20Backup/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Create-sh-script-file"><a href="#1-Create-sh-script-file" class="headerlink" title="1.Create sh script file"></a>1.Create sh script file</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch backup.sh</span><br></pre></td></tr></table></figure><h2 id="2-Copy-this-code-and-paste-it-into-backup-sh-script-file"><a href="#2-Copy-this-code-and-paste-it-into-backup-sh-script-file" class="headerlink" title="2.Copy this code and paste it into backup.sh script file"></a>2.Copy this code and paste it into backup.sh script file</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#bin/sh</span><br><span class="line">MYSQLDUMP=YOUR_MYSQLDUMP_PATH</span><br><span class="line">MYSQL_USERNAME=YOUR_MYSQL_USERNAME</span><br><span class="line">MYSQL_PASSWORD=YOUR_MYSQL_PASSWORD</span><br><span class="line">MYSQL_HOST=YOUR_MYSQL_HOST</span><br><span class="line">MYSQL_PORT=YOUR_MYSQL_PORT</span><br><span class="line">MYSQL_DB=YOUR_MYSQL_DB</span><br><span class="line">SQL_NAME=$&#123;MYSQL_DB&#125;&quot;_&quot;&quot;`date &quot;+%Y%m%d%H%M%S&quot;`&quot;&quot;.sql&quot;</span><br><span class="line">$&#123;MYSQLDUMP&#125; -u$&#123;MYSQL_USERNAME&#125; -h$&#123;MYSQL_HOST&#125; -P$&#123;MYSQL_PORT&#125; -p$&#123;MYSQL_PASSWORD&#125; $&#123;MYSQL_DB&#125; &gt; ./$&#123;SQL_NAME&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="3-Modify-file-permissions"><a href="#3-Modify-file-permissions" class="headerlink" title="3.Modify file permissions"></a>3.Modify file permissions</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 ./backup.sh</span><br></pre></td></tr></table></figure><h2 id="4-Execute-sh-script-file"><a href="#4-Execute-sh-script-file" class="headerlink" title="4. Execute sh script file"></a>4. Execute sh script file</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./backup.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《牧场物语：矿石镇的伙伴们》矿石场</title>
      <link href="/2018/01/01/%E7%89%A7%E5%9C%BA%E7%89%A9%E8%AF%AD%E7%9F%BF%E7%9F%B3%E9%95%87%E7%9A%84%E4%BC%99%E4%BC%B4%E4%BB%AC-%E7%9F%BF%E7%9F%B3%E5%9C%BA/"/>
      <url>/2018/01/01/%E7%89%A7%E5%9C%BA%E7%89%A9%E8%AF%AD%E7%9F%BF%E7%9F%B3%E9%95%87%E7%9A%84%E4%BC%99%E4%BC%B4%E4%BB%AC-%E7%9F%BF%E7%9F%B3%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<!--泉边矿石场--><table>    <tr>        <td colspan="5" style="text-align: center">泉边矿石场</td>    </tr>    <tr>        <td style="text-align: center">图</td>        <td>名称</td>        <td>代码</td>        <td>挖掘点[作用]</td>        <td>出荷价格</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510281666.gif" style="margin-bottom: 0px"></td>        <td>废矿石</td>        <td>11</td>        <td>所有层</td>        <td>1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510288512.png" style="margin-bottom: 0px"></td>        <td>钱</td>        <td></td>        <td>所有层</td>        <td></td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510280689.gif" style="margin-bottom: 0px"></td>        <td>铜</td>        <td>12</td>        <td>所有层[工具100%经验 升级用]</td>        <td>15</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510282755.gif" style="margin-bottom: 0px"></td>        <td>银</td>        <td>13</td>        <td>所有层[工具200%经验 升级用]</td>        <td>20</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510288535.gif" style="margin-bottom: 0px"></td>        <td>金</td>        <td>14</td>        <td>3层以下[工具300%经验 升级用]</td>        <td>25</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510283225.gif" style="margin-bottom: 0px"></td>        <td>秘银</td>        <td>15</td>        <td>5层以下[工具400%经验 升级用]</td>        <td>40</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510289006.gif" style="margin-bottom: 0px"></td>        <td>奥里哈钢</td>        <td>16</td>        <td>9层以下[制作项链、耳环、手镯、胸针]</td>        <td>50</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510281172.gif" style="margin-bottom: 0px"></td>        <td>金刚石</td>        <td>17</td>        <td>9层以下[制作羊毛、奶酪、蛋黄酱加工机]</td>        <td>50</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510288510.gif" style="margin-bottom: 0px"></td>        <td>贤者之石</td>        <td>1C</td>        <td>60 102 123 152 155 171 190 202 222 231~255</td>        <td>20000</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510280676.gif" style="margin-bottom: 0px"></td>        <td>黑色草</td>        <td></td>        <td>地上1 1~100 250~255</td>        <td>10</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510292324.gif" style="margin-bottom: 0px"></td>        <td>女神之玉</td>        <td>25</td>        <td>60 102 123 152 155 171 190 202 222[秘宝]</td>        <td></td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510294490.gif" style="margin-bottom: 0px"></td>        <td>力量果实</td>        <td></td>        <td>100</td>        <td></td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510296566.gif" style="margin-bottom: 0px"></td>        <td>迷之石板</td>        <td></td>        <td>255(记载烤地瓜料理方法的石板，挖到)</td>        <td></td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510292346.gif" style="margin-bottom: 0px"></td>        <td>飞行石</td>        <td></td>        <td>255(第三年起能敲到)[装备 可瞬间到地图相应位置]</td>        <td></td>    </tr></table><span id="more"></span><!--湖边矿石场--><table>    <tr>        <td colspan="5" style="text-align: center">湖边矿石场</td>    </tr>    <tr>        <td style="text-align: center">图</td>        <td>名称</td>        <td>代码</td>        <td>挖掘点[作用]</td>        <td>出荷价格</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510297137.gif" style="margin-bottom: 0px"></td>        <td>月亮石</td>        <td>18</td>        <td>个位数为8的层数 255</td>        <td>55</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510299203.gif" style="margin-bottom: 0px"></td>        <td>沙漠玫瑰石</td>        <td>19</td>        <td>个位数为9的层数 255</td>        <td>60</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510296631.gif" style="margin-bottom: 0px"></td>        <td>粉红钻石</td>        <td>1A</td>        <td>30 70 90 110 130 170 190 210 220 230 240 250~255</td>        <td>10000</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510298707.gif" style="margin-bottom: 0px"></td>        <td>亚历山大石</td>        <td>1B</td>        <td>50 100 150 200 210 220 230 240 250~255</td>        <td>10000</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510292930.gif" style="margin-bottom: 0px"></td>        <td>钻石</td>        <td>1D</td>        <td>10 20 30 70 90 110 130 170 190 201~255</td>        <td>100</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510299378.gif" style="margin-bottom: 0px"></td>        <td>祖母绿</td>        <td>1E</td>        <td>个位数为5的层数 40 60 80 120 140 160 180 201~255</td>        <td>80</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510291444.gif" style="margin-bottom: 0px"></td>        <td>红宝石</td>        <td>1F</td>        <td>50 100 150 200 以外的层数</td>        <td>75</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510293500.gif" style="margin-bottom: 0px"></td>        <td>黄玉</td>        <td>20</td>        <td>50 100 150 200 以外的层数</td>        <td>70</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510295576.gif" style="margin-bottom: 0px"></td>        <td>橄榄石</td>        <td>21</td>        <td>50 100 150 200 以外的层数</td>        <td>68</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510292915.gif" style="margin-bottom: 0px"></td>        <td>萤石</td>        <td>22</td>        <td>50 100 150 200 以外的层数</td>        <td>65</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510294071.gif" style="margin-bottom: 0px"></td>        <td>玛瑙</td>        <td>23</td>        <td>50 100 150 200 以外的层数</td>        <td>62</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510296147.gif" style="margin-bottom: 0px"></td>        <td>紫水晶</td>        <td>24</td>        <td>50 100 150 200 以外的层数</td>        <td>60</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510298213.gif" style="margin-bottom: 0px"></td>        <td>河童之玉</td>        <td>26</td>        <td>地上1 40 60 80 120 140 160 180 255[秘宝]</td>        <td></td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221510280676.gif" style="margin-bottom: 0px"></td>        <td>黑色草</td>        <td></td>        <td>所有层</td>        <td></td>    </tr></table>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GBA </tag>
            
            <tag> GAME </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 牧场物语 </tag>
            
            <tag> RPG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《牧场物语：矿石镇的伙伴们》卡莲</title>
      <link href="/2018/01/01/%E7%89%A7%E5%9C%BA%E7%89%A9%E8%AF%AD%E7%9F%BF%E7%9F%B3%E9%95%87%E7%9A%84%E4%BC%99%E4%BC%B4%E4%BB%AC-%E5%8D%A1%E8%8E%B2/"/>
      <url>/2018/01/01/%E7%89%A7%E5%9C%BA%E7%89%A9%E8%AF%AD%E7%9F%BF%E7%9F%B3%E9%95%87%E7%9A%84%E4%BC%99%E4%BC%B4%E4%BB%AC-%E5%8D%A1%E8%8E%B2/</url>
      
        <content type="html"><![CDATA[<table>    <tr>        <td colspan="4" style="text-align: center">卡莲</td>    </tr>    <tr>        <td rowspan="6"><img src="/images/game/harvestMoon/200910141652406167.gif" style="margin-bottom: 0px"></td>        <td rowspan="4"><img src="/images/game/harvestMoon/200910141652407715.gif" style="margin-bottom: 0px"></td>        <td>生日：秋季15(23日)</td>        <td>住址：杂货店</td>    </tr>    <tr>        <td colspan="2">喜欢的东西：烤马铃薯、爆米花、比萨</td>    </tr>    <tr>        <td colspan="2">人际关系： 杰夫、沙夏的女儿</td>    </tr>    <tr>        <td colspan="2">竞争对手： 里克</td>    </tr>    <tr>        <td colspan="3">简要介绍：</td>    </tr>    <tr>        <td colspan="3">            姐姐型的杂货店女孩子。最喜欢跳舞，但料理就一塌糊涂了……另外很喜欢帮助别人……好象比较喜欢喝酒……<br>            ※每天到杂货屋买东西，每持续15天爱情度加2500。        </td>    </tr></table><table>    <tr>        <td colspan="20" style="text-align: center">出现地点以及时间</td>    </tr>    <tr>        <td rowspan="2" colspan="2" style="text-align: center">结婚前</td>        <td colspan="6" style="text-align: center">AM</td>        <td colspan="12" style="text-align: center">PM</td>    </tr>    <tr>        <td style="text-align: center">6</td>        <td style="text-align: center">7</td>        <td style="text-align: center">8</td>        <td style="text-align: center">9</td>        <td style="text-align: center">10</td>        <td style="text-align: center">11</td>        <td style="text-align: center">0</td>        <td style="text-align: center">1</td>        <td style="text-align: center">2</td>        <td style="text-align: center">3</td>        <td style="text-align: center">4</td>        <td style="text-align: center">5</td>        <td style="text-align: center">6</td>        <td style="text-align: center">7</td>        <td style="text-align: center">8</td>        <td style="text-align: center">9</td>        <td style="text-align: center">10</td>        <td style="text-align: center">11</td>    </tr>    <tr>        <td style="text-align: center">晴＆雨</td>        <td style="text-align: center">日</td>        <td style="text-align: center" colspan="13">家</td>        <td style="text-align: center" colspan="3">达特的店</td>        <td style="text-align: center" colspan="2">家</td>    </tr>    <tr>        <td style="text-align: center" rowspan="2">晴</td>        <td style="text-align: center">二日以外</td>        <td style="text-align: center" colspan="2">家</td>        <td style="text-align: center" colspan="2">家-前</td>        <td style="text-align: center" colspan="3">家</td>        <td style="text-align: center" colspan="3">家-店</td>        <td style="text-align: center" colspan="3">家</td>        <td style="text-align: center" colspan="3">海滨</td>        <td style="text-align: center" colspan="2">家</td>    </tr>    <tr>        <td style="text-align: center">二</td>        <td style="text-align: center" colspan="7">家</td>        <td style="text-align: center" colspan="3">泉</td>        <td style="text-align: center" colspan="3">家</td>        <td style="text-align: center" colspan="3">达特的店</td>        <td style="text-align: center" colspan="2">家</td>    </tr>    <tr>        <td style="text-align: center" rowspan="2">雨</td>        <td style="text-align: center">二日以外</td>        <td style="text-align: center" colspan="2">家</td>        <td style="text-align: center" colspan="2">家-店</td>        <td style="text-align: center" colspan="3">家</td>        <td style="text-align: center" colspan="3">家-店</td>        <td style="text-align: center" colspan="8">家</td>    </tr>    <tr>        <td style="text-align: center">二</td>        <td style="text-align: center" colspan="2">家</td>        <td style="text-align: center" colspan="5">家</td>        <td style="text-align: center" colspan="3">哥茨的家</td>        <td style="text-align: center" colspan="3">家</td>        <td style="text-align: center" colspan="3">达特的店</td>        <td style="text-align: center" colspan="2">家</td>    </tr></table><h3 style="text-align: center">恋爱事件</h3><table>    <tr>        <td>时间：三、五 AM10:00至PM1:00</td>    </tr>    <tr>        <td>地点：杂货店</td>    </tr>    <tr>        <td>选择：选“说真的，有点困难…”，卡莲的爱情度+3000，杰夫好感度+20，道具栏有空格的话，可拿到「牧草种子」，选“没问题”，卡莲的爱情度不变，杰夫和沙夏好感度+20</td>    </tr></table><table>    <tr>        <td>时间：一、四、六 AM10:00至PM1:00</td>    </tr>    <tr>        <td>地点：杂货店</td>    </tr>    <tr>        <td>选择：选“月泪草种子”，卡莲的爱情度+3000，沙夏好感度-10，杰夫好感度+20，选“猫薄荷种子”，莲的爱情度-2000，杰夫和沙夏好感度+20</td>    </tr></table><table>    <tr>        <td>时间：三、五 AM10:00至PM1:00</td>    </tr>    <tr>        <td>地点：杂货店</td>    </tr>    <tr>        <td>选择：选“能”，卡莲的爱情度+3000，笛克、杰夫和沙夏好感度+20，背包里有空格，可得到「卡莲的葡萄酒」 ，选“还有别的事”，卡莲的爱情度-2000，笛克.杰夫和沙夏好感度-10</td>    </tr></table><table>    <tr>        <td>时间：一、四、六 AM10:00至PM1:00</td>    </tr>    <tr>        <td>地点：杂货店</td>    </tr>    <tr>        <td>选择：选“尝”，卡莲的爱情度+3000，杰夫和沙夏好感度+20，选“不尝”，卡莲的爱情度-2000，杰夫和沙夏好感度-10</td>    </tr></table><h3 style="text-align: center">喜欢与讨厌的东西</h3><table>    <tr>        <td>特别喜欢：哇！真的可以收下吗？真不好意思。</td>    </tr>    <tr>        <td>烤马铃薯、爆米花、比萨</td>    </tr></table><table>    <tr>        <td>很喜欢：哇！这是真是送我的？我好喜欢。</td>    </tr>    <tr>        <td>竹笋、松蘑、奶酪（S、M、L、G、P、X）、葡萄酒、野葡萄酒、鱼片、天麸罗、天麸罗饭、钻石、粉红钻石</td>    </tr></table><table>    <tr>        <td>喜欢：谢谢。我收下了。</td>    </tr>    <tr>        <td>            马铃薯、黄瓜、玉米、南瓜、茄子、地瓜、菠菜、青椒、温泉蛋、蛋（一般、高品质、特级、金、P、X）、蛋黄酱（S、M、L、G、P、X）、腌黄瓜、沙拉、味噌汤、炒青菜、腌萝卜、烤玉米、炖南瓜、酱烤茄子、凉拌青菜、炒鸡蛋、奶油、干酪、煮鱼、干烧伊面、鸡蛋饭、炸肉饼、三色花、月泪草、猫薄荷、青色奇幻草、红色奇幻草、紫水晶、黄玉、红宝石、祖母绿        </td>    </tr></table><table>    <tr>        <td>普通：谢谢。</td>    </tr>    <tr>        <td>            萝卜、草莓、包心菜、番茄、洋葱、菠萝、胡萝卜、野葡萄、蘑菇、牛奶（S、M、L、G、P、X）、肉丸粉、油、小麦粉、咖喱粉、饭团、面包、年糕、咖喱饭、炖品、炒饭、锅烙、三文治、果汁、果奶、菜汁、菜奶、调和汁、番茄汁、番茄酱、玉米片、菠萝汁、菜肉蛋卷、蛋炒饭、煮鸡蛋、布丁、热牛奶、竹笋饭、蘑菇饭、松蘑饭、寿司、奶油烤面包、咖喱面包、土司、法国土司、什锦寿司、乌冬、咖喱乌冬、天麸锣盖浇饭、乌冬烧、荞面条、天麸罗面、筑前煮、赏月丸子、烤年糕、烤饭团、粥、鱼糕、消闲茶、消闲茶叶、小鱼、中鱼、大鱼、春的太阳、夏的太阳、秋的太阳、冬的太阳、橄榄石、装信的瓶子        </td>    </tr></table><table>    <tr>        <td>讨厌：对不起。我不喜欢这个。</td>    </tr>    <tr>        <td>            蜂蜜、苹果、青色草、绿色草、红色草、黄色草、橙色草、紫色草、蓝色草、黑色草、白色草、葡萄汁、巧克力、回力剂、大回力剂、醒神剂、大醒神剂、荞麦粉、ＳＵＧＤＷ苹果、ＨＭＳＧＢ苹果、ＡＥＰＦＥ苹果、混合奶、草莓酱、草莓牛奶、南瓜布丁、地瓜布丁、烤地瓜、奶酪蛋糕、苹果派、苹果酱、苹果烧、葡萄酱、果酱面包、葡萄面包、烫荞面、大学芋、曲奇、巧克力曲奇、冰激淋、蛋糕、巧克力蛋糕、热蛋糕、回复草、玛瑙、萤石        </td>    </tr></table><table>    <tr>        <td>非常讨厌：啊。下次你送给别人吧？</td>    </tr>    <tr>        <td>            毒蘑菇、失败作（在碟子上的、饮品、盛在锅里的、点心、面包、乌冬）、羊毛（S、M、L、G、P、X）、毛线团（S、M、L、G、P、X）、废矿石、铜、银、金、秘银、奥里哈钢、金刚石、贤者之石、月亮石、沙漠玫瑰石、亚历山大石、杂草、石、枝、海盗之宝、古代鱼化石、空罐、长靴、鱼骨、木材、黄金木材、饲料、鸡饲料、迷之石板        </td>    </tr></table><table>    <tr>        <td>其他：这个给我？为…为什么？谢…谢谢。</td>    </tr>    <tr>        <td>手镯、项链、耳环、胸针</td>    </tr></table><table>    <tr>        <td>其他：哇！好棒哦。我真的可以收下它吗？好高兴，我想跟他们炫耀一下。</td>    </tr>    <tr>        <td>香水</td>    </tr></table><table>    <tr>        <td>其他：哇！真的可以吗？谢谢！</td>    </tr>    <tr>        <td>裙子、面膜、润肤霜、防晒霜</td>    </tr></table><span style="color: red">备注：</span> 特别喜欢：爱情度+800 很喜欢：爱情度+500 喜欢：爱情度+300 普通：爱情度+100 讨厌：爱情度-500 非常讨厌：爱情度-800]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GBA </tag>
            
            <tag> GAME </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 牧场物语 </tag>
            
            <tag> RPG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《牧场物语：矿石镇的伙伴们》人物一览</title>
      <link href="/2018/01/01/%E7%89%A7%E5%9C%BA%E7%89%A9%E8%AF%AD%E7%9F%BF%E7%9F%B3%E9%95%87%E7%9A%84%E4%BC%99%E4%BC%B4%E4%BB%AC-%E4%BA%BA%E7%89%A9%E4%B8%80%E8%A7%88/"/>
      <url>/2018/01/01/%E7%89%A7%E5%9C%BA%E7%89%A9%E8%AF%AD%E7%9F%BF%E7%9F%B3%E9%95%87%E7%9A%84%E4%BC%99%E4%BC%B4%E4%BB%AC-%E4%BA%BA%E7%89%A9%E4%B8%80%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h1 id="1-喜好"><a href="#1-喜好" class="headerlink" title="1.喜好"></a>1.喜好</h1><ul><li><strong>人物：卡特</strong><br>最优礼物：蛋（S、M、L、G、P、X）、牛奶（S、M、L、G、P、X）、葡萄酒、油、小麦粉、咖喱粉、小鱼、中鱼、大鱼</li><li><strong>人物：艾莲</strong><br>最优礼物：蜂蜜、温泉蛋、G型蛋、牛奶（S、M、L、G、P、X）、肉丸粉、小麦粉、大鱼、羊毛（S、M、L、G、P、X）</li><li><strong>人物：安娜</strong><br>最优礼物：蛋（S、M、L、G、P、X）、牛奶（S、M、L、G、P、X）葡萄酒、肉丸粉、巧克力、油、小麦粉<span id="more"></span></li><li><strong>人物：达多</strong><br>最优礼物：蛋（S、M、L、G、P、X）、牛奶（S、M、L、G、P、X）、葡萄酒、肉丸粉、巧克力、油、小麦粉、咖喱粉、饭团、面包、小鱼、中鱼、大鱼</li><li><strong>人物：笛克</strong><br>最优礼物：温泉蛋、G型蛋、葡萄酒、葡萄汁、面包、大鱼</li><li><strong>人物：哥茨</strong><br>最优礼物：蜂蜜、蛋（S、M、L、G、P、X）、油、小麦粉、咖喱粉、中鱼、大鱼、木材</li><li><strong>人物：哈里斯</strong><br>最优礼物：温泉蛋、葡萄酒、小鱼</li><li><strong>人物：霍安</strong><br>最优礼物：金蛋（G型）、金、秘银、奥里哈钢、金刚石、贤者之石、月亮石、沙漠玫瑰石、橄榄石、黄玉、红宝石、祖母绿、钻石、粉红钻石、亚历山大石、海盗之宝、古代鱼化石……（没什么最优，以上的东西自己有什么送什么吧）</li><li><strong>人物：杰夫</strong><br>最优礼物：蜂蜜、青色草、蓝色草、白色草</li><li><strong>人物：莉莉雅</strong><br>最优礼物：蜂蜜、牛奶（S、M、L、G、P、X）、青色草、绿色草、蓝色草、白色草、葡萄酒、葡萄汁、大鱼、月泪草、青色奇幻草</li><li><strong>人物：玛娜</strong><br>最优礼物：蜂蜜、G型蛋、蛋黄酱（S、M、L、G、P、X）、牛奶（S、M、L、G、P、X）、肉丸粉、小鱼、中鱼、大鱼</li><li><strong>人物：梅</strong><br>最优礼物：蜂蜜、G型蛋、葡萄汁、巧克力、大鱼、三色花、猫薄荷、青色奇幻草、羊毛（S、M、L、G、P、X）、木材、饲料</li><li><strong>人物：穆奇</strong><br>最优礼物：温泉蛋、饭团</li><li><strong>人物：赛巴拉</strong><br>最优礼物：萝卜、竹笋、松蘑、荞麦粉、年糕、大鱼、秘银、奥里哈钢、金刚石</li><li><strong>人物：沙夏</strong><br>最优礼物：巧克力、三色花、月泪草、猫薄荷、青色奇幻草</li><li><strong>人物：托马斯</strong><br>最优礼物：葡萄酒、荞麦粉</li><li><strong>人物：优</strong><br>最优礼物：蜂蜜、葡萄汁、巧克力、毛线团（S、M、L、G、P、X）</li><li><strong>人物：扎克</strong><br>最优礼物：奶酪（S、M、L、G、P、X）、葡萄酒、大鱼、猫薄荷、奥里哈钢</li><li><strong>人物：小矮人</strong><br>最优礼物：小麦粉，对应颜色的草</li><li><strong>人物：女神</strong><br>最优礼物：草莓、菠萝<br>次优礼物：蛋（S、M、L、G、P、X）、牛奶（S、M、L、G、P、X）三色花、月泪草、猫薄荷、青色奇幻草</li><li><strong>人物：河童</strong><br>最优礼物：黄瓜（青瓜）</li><li><strong>人物：班</strong><br>最优礼物：钻石、粉红钻石、亚历山大石、贤者之石、海盗宝藏、鱼化石、X型毛线团……（几乎都是好东西，有什么给什么吧）<br>次优礼物：铜、银、金、秘银、哈利奥刚、金刚石、萤石、玛瑙、橄榄石、红宝石、黄玉、紫水晶、月亮石、沙漠玫瑰石、祖母绿、G、P、X羊毛</li><li><strong>人物：露</strong><br>最优礼物：年糕、炒青菜、炒饭、味增汤、沙拉、咖喱饭、锅烙、炖品、果汁、菜汁、菜奶、果奶、调和汁、混合奶、番茄汁、草莓酱、草莓牛奶、爆米花、腌青瓜、腌萝卜、烤马铃薯、番茄酱、玉米片、烤玉米、菠萝汁、南瓜布丁、炖南瓜、酱烤茄子、地瓜布丁、烤地瓜、凉拌青菜、炒鸡蛋、菜肉蛋卷、蛋炒饭、煮鸡蛋、热牛奶、奶油、奶酪蛋糕、干酪、苹果派、苹果酱、苹果烧、竹笋饭、蘑菇饭、松蘑饭、寿司、果酱面包、葡萄面包、葡萄酱、奶油烤面包、咖喱面包、鱼片、煮鱼、什锦寿司、比萨、乌冬、咖喱乌冬、天麸锣盖浇饭、乌冬烧、天麸罗面、干烧伊面、荞面条、烫荞面、天麸罗、曲奇、巧克力曲奇、冰激淋、蛋糕、巧克力蛋糕、土司、法国土司、布丁、筑前煮、赏月丸子、烤年糕、消闲茶、三文治、天麸罗饭、热蛋糕、大学芋……（几乎都是料理，有什么给什么吧）<br>次优礼物：小麦粉、荞麦粉、肉丸粉、咖喱粉、油、饭团、面包、巧克力、葡萄酒、葡萄汁、蜂蜜、绿色草、青色草、橙色草、紫色草、蓝色草、黑色草、白色草、蛋（S、M、L、G、P、X）、温泉蛋、蛋黄酱（S、M、L、G、P、X）、牛奶（S、M、L、G、P、X）、小鱼、中鱼、大鱼</li><li><strong>人物：多特</strong><br>最优礼物：蜂蜜、毒蘑菇、牛奶（S、M、L、G、P、X）、青色草、绿色草、红色草、黄色草、橙色草、紫色草、蓝色草、黑色草、白色草、葡萄酒、青色奇幻草</li><li><strong>人物：格雷</strong><br>最优礼物：巧克力、铜、银、金、秘银、奥里哈钢、金刚石、月亮石、紫水晶、沙漠玫瑰石、玛瑙、萤石、橄榄石、黄玉、红宝石、祖母绿</li><li><strong>人物：凯伊</strong><br>最优礼物：蛋（S、M、L、G、P、X）、葡萄酒、油、小麦粉、面包、大鱼</li><li><strong>人物：克里夫</strong><br>最优礼物：咖喱饭、炖品、味噌汤、炒青菜、炒饭、锅烙、三文治、菜汁、菜奶、混合奶、酱烤茄子、凉拌青菜、炒鸡蛋、菜肉蛋卷、蛋炒饭、干酪、竹笋饭、蘑菇饭、松蘑饭、寿司、咖喱面包、煮鱼、什锦寿司、比萨、咖喱乌冬、天麸锣盖浇饭、天麸罗面、天麸罗、筑前煮、天麸罗饭……（这是最喜欢的，都是料理，有什么给什么吧）<br>次优礼物：牛奶（S、M、L、G、P、X）、葡萄酒、葡萄汁、巧克力、饭团、面包、年糕</li><li><strong>人物：里克</strong><br>最优礼物：蜂蜜、温泉蛋、蛋（S、M、L、G、P、X）葡萄酒、巧克力、大鱼、鸡饲料</li><li><strong>人物：艾丽</strong><br>最优礼物：热牛奶、赏月丸子、红色奇幻草<br>次优礼物：草莓、牛奶（S、M、L、G、P、X）、肉丸粉、三色花、猫薄荷、青色奇幻草</li><li><strong>人物：卡莲</strong><br>最优礼物：烤马铃薯、爆米花、比萨<br>次优礼物：竹笋、松蘑、奶酪（S、M、L、G、P、X）、葡萄酒</li><li><strong>人物：琳</strong><br>最优礼物：干酪、松蘑饭、蛋糕、热蛋糕<br>次优礼物：温泉蛋、巧克力、年糕</li><li><strong>人物：玛丽</strong><br>最优礼物：菜汁、菜奶、消闲茶<br>次优礼物：竹笋、野葡萄、毒蘑菇、松蘑、青色草、红色草、黑色草、白色草、葡萄汁、肉丸粉、巧克力</li><li><strong>人物：珀布利</strong><br>最优礼物：炒鸡蛋、菜肉蛋卷、蛋炒饭<br>次优礼物：草莓、苹果、蛋（S、M、L、G、P、X）、巧克力</li></ul><h1 id="2-生日"><a href="#2-生日" class="headerlink" title="2.生日"></a>2.生日</h1><table><thead><tr><th align="left">人物</th><th align="left">生日</th><th align="left">地点</th></tr></thead><tbody><tr><td align="left">紫精灵</td><td align="left">春4日</td><td align="left">教堂后面房子</td></tr><tr><td align="left">赛巴拉</td><td align="left">春11日</td><td align="left">锻冶屋</td></tr><tr><td align="left">蓝精灵</td><td align="left">春15日</td><td align="left">教堂后面房子</td></tr><tr><td align="left">艾丽</td><td align="left">春16日</td><td align="left">医院</td></tr><tr><td align="left">穆奇</td><td align="left">春17日</td><td align="left">牛羊牧场</td></tr><tr><td align="left">莉莉雅</td><td align="left">春19日</td><td align="left">养鸡场</td></tr><tr><td align="left">青精灵</td><td align="left">春24日</td><td align="left">教堂后面房子</td></tr><tr><td align="left">沙夏</td><td align="left">春30日</td><td align="left">杂货店</td></tr><tr><td align="left">帕布莉</td><td align="left">夏3日</td><td align="left">养鸡场</td></tr><tr><td align="left">哈里斯</td><td align="left">夏4日</td><td align="left">镇长家</td></tr><tr><td align="left">克里夫</td><td align="left">夏6日</td><td align="left">教堂</td></tr><tr><td align="left">巴基尔</td><td align="left">夏11日</td><td align="left">图书馆左边房子</td></tr><tr><td align="left">绿精灵</td><td align="left">夏16日</td><td align="left">教堂后面房子</td></tr><tr><td align="left">琳</td><td align="left">夏17日</td><td align="left">旅馆</td></tr><tr><td align="left">凯</td><td align="left">夏22日</td><td align="left">海之家</td></tr><tr><td align="left">托马斯</td><td align="left">夏25日</td><td align="left">镇长家</td></tr><tr><td align="left">扎克</td><td align="left">夏29日</td><td align="left">海边房子</td></tr><tr><td align="left">哥茨</td><td align="left">秋2日</td><td align="left">木匠屋</td></tr><tr><td align="left">优</td><td align="left">秋5日</td><td align="left">图书馆右边房子</td></tr><tr><td align="left">黄精灵</td><td align="left">秋10日</td><td align="left">教堂后面房子</td></tr><tr><td align="left">玛娜</td><td align="left">秋11日</td><td align="left">酒店</td></tr><tr><td align="left">红精灵</td><td align="left">秋14日</td><td align="left">教堂后面房子</td></tr><tr><td align="left">卡莲</td><td align="left">秋15日</td><td align="left">杂货店</td></tr><tr><td align="left">多特</td><td align="left">秋19日</td><td align="left">医院</td></tr><tr><td align="left">卡特</td><td align="left">秋20日</td><td align="left">教堂</td></tr><tr><td align="left">安娜</td><td align="left">秋23日</td><td align="left">图书馆左边房子</td></tr><tr><td align="left">里克</td><td align="left">秋27日</td><td align="left">养鸡场</td></tr><tr><td align="left">格雷</td><td align="left">冬6日</td><td align="left">铁匠铺</td></tr><tr><td align="left">达特</td><td align="left">冬11日</td><td align="left">旅馆</td></tr><tr><td align="left">艾莲</td><td align="left">冬13日</td><td align="left">图书馆右边房子</td></tr><tr><td align="left">笛克</td><td align="left">冬15日</td><td align="left">酒店</td></tr><tr><td align="left">霍安</td><td align="left">冬19日</td><td align="left">海边房子</td></tr><tr><td align="left">玛丽</td><td align="left">冬20日</td><td align="left">图书馆</td></tr><tr><td align="left">橙精灵</td><td align="left">冬22日</td><td align="left">教堂后面房子</td></tr><tr><td align="left">梅</td><td align="left">冬26日</td><td align="left">牛羊牧场</td></tr><tr><td align="left">杰夫</td><td align="left">冬29日</td><td align="left">杂货店</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GBA </tag>
            
            <tag> GAME </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 牧场物语 </tag>
            
            <tag> RPG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《牧场物语：矿石镇的伙伴们》收获物一览</title>
      <link href="/2018/01/01/%E7%89%A7%E5%9C%BA%E7%89%A9%E8%AF%AD%E7%9F%BF%E7%9F%B3%E9%95%87%E7%9A%84%E4%BC%99%E4%BC%B4%E4%BB%AC-%E6%94%B6%E8%8E%B7%E7%89%A9%E4%B8%80%E8%A7%88/"/>
      <url>/2018/01/01/%E7%89%A7%E5%9C%BA%E7%89%A9%E8%AF%AD%E7%9F%BF%E7%9F%B3%E9%95%87%E7%9A%84%E4%BC%99%E4%BC%B4%E4%BB%AC-%E6%94%B6%E8%8E%B7%E7%89%A9%E4%B8%80%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<!--作物列表--><table>    <tr>        <td colspan="12" style="text-align: center">作物列表</td>    </tr>    <!--  春季  -->    <tr>        <td></td>        <td style="text-align: center">图</td>        <td>名称</td>        <td>代码</td>        <td>入手地点</td>        <td>购入价格</td>        <td style="text-align: center">收获物</td>        <td>代码</td>        <td>收获时间</td>        <td>出荷价格</td>        <td>体力</td>        <td>疲劳</td>    </tr>    <tr>        <td rowspan="5">春</td>        <td><img src="/images/game/harvestMoon/200910221443318911.gif" style="margin-bottom: 0px"></td>        <td>萝卜种子</td>        <td>D32</td>        <td rowspan="4">杂货店</td>        <td>120</td>        <td><img src="/images/game/harvestMoon/200910221443315868.gif" style="margin-bottom: 0px"></td>        <td>L00</td>        <td>4日</td>        <td>60</td>        <td>3</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443317934.gif" style="margin-bottom: 0px"></td>        <td>马铃薯种子</td>        <td>D33</td>        <td>150</td>        <td><img src="/images/game/harvestMoon/200910221443313724.gif" style="margin-bottom: 0px"></td>        <td>L01</td>        <td>7日</td>        <td>80</td>        <td>3</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443315880.gif" style="margin-bottom: 0px"></td>        <td>黄瓜种子</td>        <td>D34</td>        <td>200</td>        <td><img src="/images/game/harvestMoon/200910221443310671.gif" style="margin-bottom: 0px"></td>        <td>L02</td>        <td>9日(5日)</td>        <td>60</td>        <td>4</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443316451.gif" style="margin-bottom: 0px"></td>        <td>草莓种子</td>        <td>D35</td>        <td>150</td>        <td><img src="/images/game/harvestMoon/200910221443318527.gif" style="margin-bottom: 0px"></td>        <td>L03</td>        <td>8日(2日)</td>        <td>30</td>        <td>5</td>        <td>-2</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443310693.gif" style="margin-bottom: 0px"></td>        <td>包心菜种子</td>        <td>D36</td>        <td>中国商人</td>        <td>500</td>        <td><img src="/images/game/harvestMoon/200910221443317022.gif" style="margin-bottom: 0px"></td>        <td>L04</td>        <td>14日</td>        <td>250</td>        <td>3</td>        <td>-1</td>    </tr>    <!--  夏季  -->    <tr>        <td rowspan="5">夏</td>        <td><img src="/images/game/harvestMoon/200910221443317540.gif" style="margin-bottom: 0px"></td>        <td>番茄种子</td>        <td>D37</td>        <td rowspan="4">杂货店</td>        <td>200</td>        <td><img src="/images/game/harvestMoon/200910221443314988.gif" style="margin-bottom: 0px"></td>        <td>L05</td>        <td>9日(3日)</td>        <td>60</td>        <td>4</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443316044.gif" style="margin-bottom: 0px"></td>        <td>玉米种子</td>        <td>D38</td>        <td>300</td>        <td><img src="/images/game/harvestMoon/200910221443318010.gif" style="margin-bottom: 0px"></td>        <td>L06</td>        <td>14日(3日)</td>        <td>100</td>        <td>3</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443314801.gif" style="margin-bottom: 0px"></td>        <td>洋葱种子</td>        <td>D39</td>        <td>150</td>        <td><img src="/images/game/harvestMoon/200910221443326967.gif" style="margin-bottom: 0px"></td>        <td>L07</td>        <td>7日</td>        <td>80</td>        <td>3</td>        <td>-1        </td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443323305.gif" style="margin-bottom: 0px"></td>        <td>南瓜种子</td>        <td>D3A</td>        <td>500</td>        <td><img src="/images/game/harvestMoon/200910221443325471.gif" style="margin-bottom: 0px"></td>        <td>L08</td>        <td>14日</td>        <td>250</td>        <td>3</td>        <td>-1        </td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443320252.gif" style="margin-bottom: 0px"></td>        <td>菠萝种子</td>        <td>D3B</td>        <td>中国商人</td>        <td>1000</td>        <td><img src="/images/game/harvestMoon/200910221443326042.gif" style="margin-bottom: 0px"></td>        <td>L09</td>        <td>20日(5日)</td>        <td>500</td>        <td>5</td>        <td>-2</td>    </tr>    <!--  秋天  -->    <tr>        <td rowspan="5">秋</td>        <td><img src="/images/game/harvestMoon/200910221443320274.gif" style="margin-bottom: 0px"></td>        <td>茄子种子</td>        <td>D3C</td>        <td rowspan="4">杂货店</td>        <td>120</td>        <td><img src="/images/game/harvestMoon/200910221443322341.gif" style="margin-bottom: 0px"></td>        <td>L0A</td>        <td>9日(3日)</td>        <td>80</td>        <td>3</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443329779.gif" style="margin-bottom: 0px"></td>        <td>胡萝卜种子</td>        <td>D3D</td>        <td>300</td>        <td><img src="/images/game/harvestMoon/200910221443321845.gif" style="margin-bottom: 0px"></td>        <td>L0B</td>        <td>7日</td>        <td>120</td>        <td>4</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443326635.gif" style="margin-bottom: 0px"></td>        <td>地瓜种子</td>        <td>D3E</td>        <td>300</td>        <td><img src="/images/game/harvestMoon/200910221443328792.gif" style="margin-bottom: 0px"></td>        <td>L0C</td>        <td>5日(2日)</td>        <td>120</td>        <td>3</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443320868.gif" style="margin-bottom: 0px"></td>        <td>菠菜种子</td>        <td>D3F</td>        <td>200</td>        <td><img src="/images/game/harvestMoon/200910221443322934.gif" style="margin-bottom: 0px"></td>        <td>L0D</td>        <td>5日</td>        <td>80</td>        <td>3</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443329262.gif" style="margin-bottom: 0px"></td>        <td>青椒种子</td>        <td>D40</td>        <td>中国商人</td>        <td>150</td>        <td><img src="/images/game/harvestMoon/200910221443321338.gif" style="margin-bottom: 0px"></td>        <td>L0E</td>        <td>7日(2日)</td>        <td>40</td>        <td>3</td>        <td>-1</td>    </tr>    <!--    -->    <tr>        <td></td>        <td><img src="/images/game/harvestMoon/200910221443328207.gif" style="margin-bottom: 0px"></td>        <td>牧草种子</td>        <td>D41</td>        <td>杂货店</td>        <td>500</td>        <td></td>        <td></td>        <td>11日</td>        <td></td>        <td></td>        <td></td>    </tr></table><span id="more"></span><p>备注： </p><p>草莓种子要萝卜、马铃薯、黄瓜分别出货100个以上才能买到</p><p>南瓜、菠菜种子也是要该季节杂货屋的其他作物出荷量达到100才可买到。</p><p>收获时间中，数字代表过几天收获，如果有括号代表该作物可多次收获。</p><p>比如菠萝1号撒种则21号收获(1+20=21)，然后26号也能收获(21+5=26)</p><!--花--><table>    <tr>        <td colspan="9" style="text-align: center">花</td>    </tr>    <tr>        <td style="text-align: center">图</td>        <td>名称</td>        <td>代码</td>        <td>入手地点</td>        <td>购入价格</td>        <td>收获时间</td>        <td style="text-align: center">收获物</td>        <td>出荷价格</td>        <td>备注</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443325646.gif" style="margin-bottom: 0px"></td>        <td>月泪草种子</td>        <td>D42</td>        <td rowspan="4">中国商人</td>        <td>500</td>        <td>6日</td>        <td><img src="/images/game/harvestMoon/200910221443327702.gif" style="margin-bottom: 0px"></td>        <td></td>        <td>春天的花</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443329878.gif" style="margin-bottom: 0px"></td>        <td>猫薄荷种子</td>        <td>D43</td>        <td>300</td>        <td>6日</td>        <td><img src="/images/game/harvestMoon/200910221443321944.gif" style="margin-bottom: 0px"></td>        <td></td>        <td>夏天的花</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443328383.gif" style="margin-bottom: 0px"></td>        <td>奇幻草种子</td>        <td>D44</td>        <td>600</td>        <td>10日</td>        <td>            <img src="/images/game/harvestMoon/200910221443324163.gif" style="margin-bottom: 0px">            <img src="/images/game/harvestMoon/200910221443326239.gif" style="margin-bottom: 0px">        </td>        <td></td>        <td>秋天的花</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443328395.gif" style="margin-bottom: 0px"></td>        <td>三色花种子</td>        <td>D45</td>        <td>400</td>        <td>12日</td>        <td><img src="/images/game/harvestMoon/200910221443330461.gif" style="margin-bottom: 0px"></td>        <td></td>        <td>春天的花</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443327702.gif" style="margin-bottom: 0px"></td>        <td>月泪草</td>        <td>Z00</td>        <td>春的山</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>春天的花</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443321944.gif" style="margin-bottom: 0px"></td>        <td>猫薄荷</td>        <td>Z01</td>        <td>夏的山</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>夏天的花</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443324163.gif" style="margin-bottom: 0px"></td>        <td>青色奇幻草</td>        <td>Z02</td>        <td rowspan="2">秋的山</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>秋天的花</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443326239.gif" style="margin-bottom: 0px"></td>        <td>红色奇幻草</td>        <td>Z03</td>        <td></td>        <td></td>        <td></td>        <td>200</td>        <td>5%的机会得到</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443330461.gif" style="margin-bottom: 0px"></td>        <td>三色花</td>        <td>Z04</td>        <td>春的山</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>春天的花</td>    </tr></table><!--草--><table>    <tr>        <td colspan="7" style="text-align: center">草</td>    </tr>    <tr>        <td style="text-align: center">图</td>        <td>名称</td>        <td>代码</td>        <td>入手地点</td>        <td>出荷价格</td>        <td>体力</td>        <td>疲劳</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443332503.gif" style="margin-bottom: 0px"></td>        <td>青色草</td>        <td>L2F</td>        <td>春、夏的山</td>        <td>100</td>        <td>10</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443334679.gif" style="margin-bottom: 0px"></td>        <td>绿色草</td>        <td>L30</td>        <td rowspan="2">夏、秋的山</td>        <td>100</td>        <td>0</td>        <td>-2</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443336745.gif" style="margin-bottom: 0px"></td>        <td>红色草</td>        <td>L31</td>        <td>110</td>        <td>-10</td>        <td>5</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443331525.gif" style="margin-bottom: 0px"></td>        <td>黄色草</td>        <td>L32</td>        <td rowspan="2">春的海岸</td>        <td>120</td>        <td>-5</td>        <td>-5</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443337316.gif" style="margin-bottom: 0px"></td>        <td>橙色草</td>        <td>L33</td>        <td>100</td>        <td>0</td>        <td>0</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443339472.gif" style="margin-bottom: 0px"></td>        <td>紫色草</td>        <td>L34</td>        <td>夏的海岸</td>        <td>120</td>        <td>5</td>        <td>-2</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443335262.gif" style="margin-bottom: 0px"></td>        <td>蓝色草</td>        <td>L35</td>        <td>秋的海岸</td>        <td>100</td>        <td>20</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443336338.gif" style="margin-bottom: 0px"></td>        <td>黑色草</td>        <td>L36</td>        <td>矿石场</td>        <td>10</td>        <td>5</td>        <td>-5</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443334767.gif" style="margin-bottom: 0px"></td>        <td>白色草</td>        <td>L37</td>        <td>冬木工家上方</td>        <td>150</td>        <td>10</td>        <td>-10</td>    </tr></table><!--其它收获物--><table>    <tr>        <td colspan="7" style="text-align: center">其他收获物</td>    </tr>    <tr>        <td style="text-align: center">图</td>        <td>名称</td>        <td>代码</td>        <td>入手地点</td>        <td>出荷价格</td>        <td>体力</td>        <td>疲劳</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443339557.gif" style="margin-bottom: 0px"></td>        <td>苹果</td>        <td>L28</td>        <td>秋的牧场·果树下</td>        <td>50</td>        <td>2</td>        <td>-2</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443330965.gif" style="margin-bottom: 0px"></td>        <td>蜂蜜</td>        <td>L29</td>        <td>四季牧场·果树上</td>        <td>50</td>        <td>2</td>        <td>-2</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443337303.gif" style="margin-bottom: 0px"></td>        <td>竹笋</td>        <td>L2A</td>        <td>春的山</td>        <td>50</td>        <td>10</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443339470.gif" style="margin-bottom: 0px"></td>        <td>野葡萄</td>        <td>L2B</td>        <td>夏的山</td>        <td>50</td>        <td>10</td>        <td>-2</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443331536.gif" style="margin-bottom: 0px"></td>        <td>蘑菇</td>        <td>L2C</td>        <td rowspan="2">秋的山</td>        <td>70</td>        <td>10</td>        <td>-1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443336326.gif" style="margin-bottom: 0px"></td>        <td>毒蘑菇</td>        <td>L2D</td>        <td>100</td>        <td>-50</td>        <td>1</td>    </tr>    <tr>        <td><img src="/images/game/harvestMoon/200910221443338492.gif" style="margin-bottom: 0px"></td>        <td>松蘑</td>        <td>L2E</td>        <td>秋的山·教堂后侧</td>        <td>500</td>        <td>20</td>        <td>-1</td>    </tr></table>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GBA </tag>
            
            <tag> GAME </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 牧场物语 </tag>
            
            <tag> RPG </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
