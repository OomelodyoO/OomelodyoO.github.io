<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Windows Install Kafka</title>
      <link href="/2018/10/17/Windows%20Install%20Kafka/"/>
      <url>/2018/10/17/Windows%20Install%20Kafka/</url>
      
        <content type="html"><![CDATA[<h5 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h5><p><strong><a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.0.0/kafka-2.0.0-src.tgz" title="kafka下载地址" target="_blank" rel="noopener">kafka下载地址</a></strong></p><h5 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="2.解压安装"></a>2.解压安装</h5><p>使用解压工具对压缩包进行解压<br><img src="/2018/10/17/Windows%20Install%20Kafka/1.JPG">  </p><h5 id="3-配置参数"><a href="#3-配置参数" class="headerlink" title="3.配置参数"></a>3.配置参数</h5><ul><li>配置参数  </li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">broker.id=0</span><br><span class="line">#listeners=PLAINTEXT://:9092</span><br><span class="line">#advertised.listeners=PLAINTEXT://your.host.name:9092</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line"># log存放位置</span><br><span class="line">log.dirs=F:\\kafka_2.12-2.0.0\\logs</span><br><span class="line">num.partitions=1</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">#log.flush.interval.messages=10000</span><br><span class="line">#log.flush.interval.ms=1000</span><br><span class="line">log.retention.hours=168</span><br><span class="line">#log.retention.bytes=1073741824</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"># 连接zookeeper集群地址</span><br><span class="line">zookeeper.connect=localhost:2181,localhost:2182,localhost:2183</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br></pre></td></tr></table></figure><h5 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h5><h6 id="启动Server"><a href="#启动Server" class="headerlink" title="启动Server:"></a>启动Server:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\kafka-server-start.bat server.properties</span><br></pre></td></tr></table></figure><h6 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test3</span><br></pre></td></tr></table></figure><h6 id="查看topic"><a href="#查看topic" class="headerlink" title="查看topic"></a>查看topic</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\windows\kafka-topics.bat --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure><h6 id="producer启动"><a href="#producer启动" class="headerlink" title="producer启动"></a>producer启动</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure><h6 id="consumer启动"><a href="#consumer启动" class="headerlink" title="consumer启动"></a>consumer启动</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\kafka_2.12-2.0.0\bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test  --from-beginning</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/kafka" title="kafka源码地址​github.com" target="_blank" rel="noopener">kafka源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows Install ZooKeeper</title>
      <link href="/2018/10/17/Windows%20Install%20ZooKeeper/"/>
      <url>/2018/10/17/Windows%20Install%20ZooKeeper/</url>
      
        <content type="html"><![CDATA[<p>笔者认为只要能在Windows下运行的项目，在MacOS、Linux出现问题的概率会很小，所以此次选择在Windows环境下安装运行zookeeper项目。</p><h5 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h5><p><strong><a href="https://www.apache.org/dyn/closer.cgi/zookeeper/" title="ZooKeeper下载地址" target="_blank" rel="noopener">ZooKeeper下载地址</a></strong></p><h5 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="2.解压安装"></a>2.解压安装</h5><p>使用解压工具对压缩包进行解压<br><img src="/2018/10/17/Windows%20Install%20ZooKeeper/1.JPG">  </p><h5 id="3-配置参数"><a href="#3-配置参数" class="headerlink" title="3.配置参数"></a>3.配置参数</h5><ul><li>进入conf文件夹</li><li>复制zoo_sample.cfg文件为zoo.cfg</li><li>配置参数  <a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 服务器客户端心跳间隔（毫秒）</span><br><span class="line">tickTime=2000</span><br><span class="line"># 初始化连接忍受多少个tickTime时间间隔</span><br><span class="line">initLimit=10</span><br><span class="line"># leader与follower发送消息，请求应答时间，不能超过多少个tickTime</span><br><span class="line">syncLimit=5</span><br><span class="line"># 数据存放位置</span><br><span class="line">dataDir=F:\\zookeeper-3.4.13\\data</span><br><span class="line"># 日志存放位置</span><br><span class="line">dataLogDir=F:\\zookeeper-3.4.13\\log</span><br><span class="line"># 开启端口号</span><br><span class="line">clientPort=2181</span><br><span class="line"># server.X=A:B:C X-代表服务器编号 A-代表ip B和C-代表端口，这个端口用来系统之间通信</span><br><span class="line"># 配置集群 需要在dataDir文件内增加myid文件，文件内容为相应服务器编号</span><br><span class="line">server.1=localhost:2888:3888</span><br><span class="line">server.2=localhost:2889:3889</span><br><span class="line">server.3=localhost:2890:3890</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h5><h6 id="Server"><a href="#Server" class="headerlink" title="Server:"></a>Server:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.cmd</span><br></pre></td></tr></table></figure><h6 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkCli.cmd</span><br></pre></td></tr></table></figure><h5 id="5-授权管理"><a href="#5-授权管理" class="headerlink" title="5.授权管理"></a>5.授权管理</h5><h6 id="ZOOKEEPER权限分为"><a href="#ZOOKEEPER权限分为" class="headerlink" title="ZOOKEEPER权限分为:"></a>ZOOKEEPER权限分为:</h6><ul><li>CREATE: 你可以创建子节点。</li><li>READ: 你可以获取节点数据以及当前节点的子节点列表。</li><li>WRITE: 你可以为节点设置数据。</li><li>DELETE: 你可以删除子节点。</li><li>ADMIN: 可以为节点设置权限。  </li></ul><h6 id="CreateMode节点创建方式"><a href="#CreateMode节点创建方式" class="headerlink" title="CreateMode节点创建方式"></a>CreateMode节点创建方式</h6><ul><li>PERSISTENT：客户端与zookeeper断开连接后，该节点依旧存在</li><li>PERSISTENT_SEQUENTIAL：客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号</li><li>EPHEMERAL：客户端与zookeeper断开连接后，该节点被删除</li><li>EPHEMERAL_SEQUENTIAL：客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号  </li></ul><h6 id="ZOOKEEPER命令"><a href="#ZOOKEEPER命令" class="headerlink" title="ZOOKEEPER命令:"></a>ZOOKEEPER命令:</h6><p>创建node<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create /acl acl</span><br></pre></td></tr></table></figure></p><p>查看节点列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></table></figure></p><p>查看节点信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /</span><br></pre></td></tr></table></figure></p><p>设置节点信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set / info</span><br></pre></td></tr></table></figure></p><p>删除节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete /</span><br></pre></td></tr></table></figure></p><p>通过setAcl设置用户名和密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setAcl path digest:username:base64(sha1(password)):crwda</span><br><span class="line">setAcl /acl digest:zookeeper:4lvlzsipXVaEhXMd+2qMrLc0at8=:r</span><br></pre></td></tr></table></figure></p><p>认证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addauth digest username:password</span><br></pre></td></tr></table></figure></p><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/zookeeper" title="zookeeper源码地址​github.com" target="_blank" rel="noopener">zookeeper源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>（三）JAVA NIO SELECTOR</title>
      <link href="/2018/09/12/%EF%BC%88%E4%B8%89%EF%BC%89JAVA%20NIO%20SELECTOR/"/>
      <url>/2018/09/12/%EF%BC%88%E4%B8%89%EF%BC%89JAVA%20NIO%20SELECTOR/</url>
      
        <content type="html"><![CDATA[<h4 id="Selector（选择器）是Java-NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。"><a href="#Selector（选择器）是Java-NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。" class="headerlink" title="Selector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。"></a>Selector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。</h4><p>SelectServer.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class SelectServer &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.socket().bind(new InetSocketAddress(9999));</span><br><span class="line">        serverSocketChannel.configureBlocking(false);</span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        SelectionKey selectionKey = serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            int select = selector.select();</span><br><span class="line">            if (select &gt; 0) &#123;</span><br><span class="line">                Iterator keyIterator = selector.selectedKeys().iterator();</span><br><span class="line">                while (keyIterator.hasNext()) &#123;</span><br><span class="line">                    SelectionKey next = (SelectionKey) keyIterator.next();</span><br><span class="line">                    keyIterator.remove();</span><br><span class="line">                    if (next.isAcceptable()) &#123;</span><br><span class="line">                        System.out.println(&quot;isAcceptable&quot;);</span><br><span class="line">                        SocketChannel channel = ((ServerSocketChannel) next.channel()).accept();</span><br><span class="line">                        channel.configureBlocking(false);</span><br><span class="line">                        channel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    &#125; else if (next.isConnectable()) &#123;</span><br><span class="line">                        System.out.println(&quot;connect&quot;);</span><br><span class="line">                    &#125; else if (next.isReadable()) &#123;</span><br><span class="line">                        System.out.println(&quot;isReadable&quot;);</span><br><span class="line">                        SocketChannel socketChannel = (SocketChannel) next.channel();</span><br><span class="line">                        ByteBuffer readByteBuffer = ByteBuffer.allocate(100);</span><br><span class="line">                        int read = socketChannel.read(readByteBuffer);</span><br><span class="line">                        System.out.println(new String(readByteBuffer.array(), 0, read));</span><br><span class="line">                        socketChannel.register(selector, SelectionKey.OP_WRITE);</span><br><span class="line">                        socketChannel.write(readByteBuffer);</span><br><span class="line">                    &#125; else if (next.isWritable()) &#123;</span><br><span class="line">                        System.out.println(&quot;isWritable&quot;);</span><br><span class="line">                        SocketChannel socketChannel = (SocketChannel) next.channel();</span><br><span class="line">                        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>NioChannelClient.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class NioChannelClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(new InetSocketAddress(&quot;localhost&quot;, 9999));</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            Scanner input = new Scanner(System.in);</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(input.nextLine().getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/nio" title="Nio源码地址​github.com" target="_blank" rel="noopener">Nio源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Nio </tag>
            
            <tag> Selector </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>（二）JAVA NIO CHANNEL</title>
      <link href="/2018/09/11/%EF%BC%88%E4%BA%8C%EF%BC%89JAVA%20NIO%20CHANNEL/"/>
      <url>/2018/09/11/%EF%BC%88%E4%BA%8C%EF%BC%89JAVA%20NIO%20CHANNEL/</url>
      
        <content type="html"><![CDATA[<h4 id="FileChannel-从文件中读写数据。"><a href="#FileChannel-从文件中读写数据。" class="headerlink" title="FileChannel 从文件中读写数据。"></a>FileChannel 从文件中读写数据。</h4><p>FileChannelTest.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class FileChannelTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileChannel inputFileChannel = new FileInputStream(&quot;file.text absolute path&quot;).getChannel();</span><br><span class="line">        ByteBuffer readBuffer = ByteBuffer.allocate(100);</span><br><span class="line">        inputFileChannel.read(readBuffer);</span><br><span class="line">        readBuffer.flip();</span><br><span class="line">        for (int i = 0; i &lt; readBuffer.limit(); i++) &#123;</span><br><span class="line">            System.out.println((char) readBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileChannel outputFileChannel = new FileOutputStream(&quot;file.text absolute path&quot;, true).getChannel();</span><br><span class="line">        ByteBuffer writeBuffer = ByteBuffer.wrap(&quot;TOM&quot;.getBytes());</span><br><span class="line">        outputFileChannel.write(writeBuffer);</span><br><span class="line"></span><br><span class="line">        inputFileChannel.close();</span><br><span class="line">        outputFileChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="DatagramChannel-能通过UDP读写网络中的数据。"><a href="#DatagramChannel-能通过UDP读写网络中的数据。" class="headerlink" title="DatagramChannel 能通过UDP读写网络中的数据。"></a>DatagramChannel 能通过UDP读写网络中的数据。</h4><p>DatagramChannelServer.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class DatagramChannelServer &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        DatagramChannel channel = DatagramChannel.open();</span><br><span class="line">        channel.socket().bind(new InetSocketAddress(9999));</span><br><span class="line"></span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(48);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            channel.receive(buf);</span><br><span class="line">            buf.flip();</span><br><span class="line">            for (int i = 0; i &lt; buf.limit(); i++) &#123;</span><br><span class="line">                System.out.println((char) buf.get());</span><br><span class="line">            &#125;</span><br><span class="line">            buf.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>DatagramChannelClient.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class DatagramChannelClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        DatagramChannel channel = DatagramChannel.open();</span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(48);</span><br><span class="line">        buf = buf.wrap(&quot;AA&quot;.getBytes());</span><br><span class="line">        channel.send(buf, new InetSocketAddress(&quot;localhost&quot;, 9999));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="ServerSocketChannel-可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。"><a href="#ServerSocketChannel-可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。" class="headerlink" title="ServerSocketChannel 可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。"></a>ServerSocketChannel 可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。</h4><h4 id="SocketChannel-能通过TCP读写网络中的数据。"><a href="#SocketChannel-能通过TCP读写网络中的数据。" class="headerlink" title="SocketChannel 能通过TCP读写网络中的数据。"></a>SocketChannel 能通过TCP读写网络中的数据。</h4><p>NioChannelServer.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class NioChannelServer &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.socket().bind(new InetSocketAddress(9999));</span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(48);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            SocketChannel channel = serverSocketChannel.accept();</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                channel.read(buf);</span><br><span class="line">                buf.flip();</span><br><span class="line">                for (int i = 0; i &lt; buf.limit(); i++) &#123;</span><br><span class="line">                    System.out.println((char) buf.get());</span><br><span class="line">                &#125;</span><br><span class="line">                buf.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>NioChannelClient.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class NioChannelClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(new InetSocketAddress(&quot;localhost&quot;, 9999));</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            Scanner input = new Scanner(System.in);</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(input.nextLine().getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/nio" title="Nio源码地址​github.com" target="_blank" rel="noopener">Nio源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Nio </tag>
            
            <tag> Channel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>（一）JAVA NIO BUFFER</title>
      <link href="/2018/09/10/%EF%BC%88%E4%B8%80%EF%BC%89JAVA%20NIO%20BUFFER/"/>
      <url>/2018/09/10/%EF%BC%88%E4%B8%80%EF%BC%89JAVA%20NIO%20BUFFER/</url>
      
        <content type="html"><![CDATA[<h2 id="1-变量："><a href="#1-变量：" class="headerlink" title="1.变量："></a>1.变量：</h2><h5 id="capacity：-指定了可以存储在缓冲区中的最大数据容量，实际上，它指定了底层数组的大小，或者至少是指定了准许我们使用的底层数组的容量。"><a href="#capacity：-指定了可以存储在缓冲区中的最大数据容量，实际上，它指定了底层数组的大小，或者至少是指定了准许我们使用的底层数组的容量。" class="headerlink" title="capacity： 指定了可以存储在缓冲区中的最大数据容量，实际上，它指定了底层数组的大小，或者至少是指定了准许我们使用的底层数组的容量。"></a>capacity： 指定了可以存储在缓冲区中的最大数据容量，实际上，它指定了底层数组的大小，或者至少是指定了准许我们使用的底层数组的容量。</h5><h5 id="position：-下一次读取或写入的位置。（每次调用get-put方法-1）"><a href="#position：-下一次读取或写入的位置。（每次调用get-put方法-1）" class="headerlink" title="position： 下一次读取或写入的位置。（每次调用get put方法+1）"></a>position： 下一次读取或写入的位置。（每次调用get put方法+1）</h5><h5 id="limit：指定还有多少数据需要取出，或者还有多少空间可以放入数据。（每次调用get-put方法时候，通过position与limit对比）"><a href="#limit：指定还有多少数据需要取出，或者还有多少空间可以放入数据。（每次调用get-put方法时候，通过position与limit对比）" class="headerlink" title="limit：指定还有多少数据需要取出，或者还有多少空间可以放入数据。（每次调用get put方法时候，通过position与limit对比）"></a>limit：指定还有多少数据需要取出，或者还有多少空间可以放入数据。（每次调用get put方法时候，通过position与limit对比）</h5><h2 id="2-方法："><a href="#2-方法：" class="headerlink" title="2.方法："></a>2.方法：</h2><h5 id="get：position-1"><a href="#get：position-1" class="headerlink" title="get：position + 1"></a>get：position + 1</h5><h5 id="put：position-1"><a href="#put：position-1" class="headerlink" title="put：position + 1"></a>put：position + 1</h5><h5 id="flip：limit-position-position-0-mark-1"><a href="#flip：limit-position-position-0-mark-1" class="headerlink" title="flip：limit = position position = 0 mark = -1"></a>flip：limit = position position = 0 mark = -1</h5><h5 id="clear：limit-capacity-position-0-mark-1"><a href="#clear：limit-capacity-position-0-mark-1" class="headerlink" title="clear：limit = capacity position = 0 mark = -1"></a>clear：limit = capacity position = 0 mark = -1</h5><h5 id="mark：-mark-position"><a href="#mark：-mark-position" class="headerlink" title="mark： mark = position"></a>mark： mark = position</h5><h5 id="reset：position-m"><a href="#reset：position-m" class="headerlink" title="reset：position = m;"></a>reset：position = m;</h5><h5 id="duplicate：浅拷贝（每个缓存区的上界、容量、位置等属性是各自独立的）"><a href="#duplicate：浅拷贝（每个缓存区的上界、容量、位置等属性是各自独立的）" class="headerlink" title="duplicate：浅拷贝（每个缓存区的上界、容量、位置等属性是各自独立的）"></a>duplicate：浅拷贝（每个缓存区的上界、容量、位置等属性是各自独立的）</h5><a id="more"></a><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><h5 id="BufferTest-java"><a href="#BufferTest-java" class="headerlink" title="BufferTest.java"></a>BufferTest.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">public class BufferTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        IntBuffer buff = IntBuffer.allocate(10);</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(1);</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(2);</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(3);</span><br><span class="line">        buff.mark();</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(4);</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(5);</span><br><span class="line">        System.out.println(&quot; ========== init ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + buff.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + buff.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + buff.position());</span><br><span class="line">        System.out.println();</span><br><span class="line">        buff.reset();</span><br><span class="line">        System.out.println(&quot; ========== mark reset ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + buff.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + buff.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + buff.position());</span><br><span class="line">        System.out.println();</span><br><span class="line">        buff.flip();</span><br><span class="line">        System.out.println(&quot; ========== flip ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + buff.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + buff.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + buff.position());</span><br><span class="line">        for (int i = 0; i &lt; buff.limit(); i++) &#123;</span><br><span class="line">            System.out.print(buff.get() + &quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println();</span><br><span class="line">        buff.clear();</span><br><span class="line">        System.out.println(&quot; ========== clear ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + buff.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + buff.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + buff.position());</span><br><span class="line">        for (int i = 0; i &lt; buff.limit(); i++) &#123;</span><br><span class="line">            System.out.print(buff.get() + &quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        //重新数据初始化</span><br><span class="line">        System.out.println(&quot; ========== duplicate ========== &quot;);</span><br><span class="line">        buff.clear();</span><br><span class="line">        IntBuffer copyIntBuffer = buff.duplicate();</span><br><span class="line">        buff.get();</span><br><span class="line">        buff.put(2);</span><br><span class="line">        System.out.println(&quot; ========== buff duplicate ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + buff.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + buff.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + buff.position());</span><br><span class="line">        System.out.println(buff);</span><br><span class="line">        System.out.println(&quot; ========== copyIntBuffer duplicate ========== &quot;);</span><br><span class="line">        System.out.println(&quot;capacity:\t&quot; + copyIntBuffer.capacity());</span><br><span class="line">        System.out.println(&quot;limit:\t&quot; + copyIntBuffer.limit());</span><br><span class="line">        System.out.println(&quot;position:\t&quot; + copyIntBuffer.position());</span><br><span class="line">        for (int i = 0; i &lt; buff.limit(); i++) &#123;</span><br><span class="line">            System.out.print(copyIntBuffer.get() + &quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Console"><a href="#4-Console" class="headerlink" title="4.Console"></a>4.Console</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> ========== init ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:10</span><br><span class="line">position:10</span><br><span class="line"></span><br><span class="line"> ========== mark reset ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:10</span><br><span class="line">position:6</span><br><span class="line"></span><br><span class="line"> ========== flip ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:6</span><br><span class="line">position:0</span><br><span class="line">010203</span><br><span class="line"></span><br><span class="line"> ========== clear ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:10</span><br><span class="line">position:0</span><br><span class="line">0102030405</span><br><span class="line"></span><br><span class="line"> ========== duplicate ========== </span><br><span class="line"> ========== buff duplicate ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:10</span><br><span class="line">position:2</span><br><span class="line">java.nio.HeapIntBuffer[pos=2 lim=10 cap=10]</span><br><span class="line"> ========== copyIntBuffer duplicate ========== </span><br><span class="line">capacity:10</span><br><span class="line">limit:10</span><br><span class="line">position:0</span><br><span class="line">0202030405</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/nio" title="Nio源码地址​github.com" target="_blank" rel="noopener">Nio源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Nio </tag>
            
            <tag> Buffer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ五种模式(TOPICS模式)</title>
      <link href="/2018/09/09/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-TOPICS%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/09/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-TOPICS%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<img src="/2018/09/09/RabbitMQ五种模式-TOPICS模式/topics.jpg"><p>Send.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Send &#123;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_topic&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, &quot;topic&quot;);</span><br><span class="line">        String message = &quot;message&quot;;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, &quot;item.broadcast&quot;, null, message.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Recv.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class Recv &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_topic_1&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_topic&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;item.broadcast&quot;);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;item.a&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &apos;&quot; + message + &quot;&apos;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recv2.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class Recv2 &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_topic_2&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_topic&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;item.broadcast&quot;);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;item.b&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &apos;&quot; + message + &quot;&apos;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &apos;java&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version = &apos;0.0.1-SNAPSHOT&apos;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &apos;com.rabbitmq&apos;, name: &apos;amqp-client&apos;, version: &apos;5.3.0&apos;</span><br><span class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/rabbit-mq" title="rabbit-mq源码地址​github.com" target="_blank" rel="noopener">rabbit-mq源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ五种模式(ROUTING模式)</title>
      <link href="/2018/09/08/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-ROUTING%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/08/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-ROUTING%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<img src="/2018/09/08/RabbitMQ五种模式-ROUTING模式/routing.jpg"><p>Send.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Send &#123;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_direct&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, &quot;direct&quot;);</span><br><span class="line">        String message = &quot;message&quot;;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, &quot;insert&quot;, null, message.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Recv.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class Recv &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_direct_1&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_direct&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;update&quot;);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;delete&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &apos;&quot; + message + &quot;&apos;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recv2.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Recv2 &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_direct_2&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_direct&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;insert&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &apos;&quot; + message + &quot;&apos;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &apos;java&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version = &apos;0.0.1-SNAPSHOT&apos;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &apos;com.rabbitmq&apos;, name: &apos;amqp-client&apos;, version: &apos;5.3.0&apos;</span><br><span class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/rabbit-mq" title="rabbit-mq源码地址​github.com" target="_blank" rel="noopener">rabbit-mq源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ五种模式(P/S模式)</title>
      <link href="/2018/09/07/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-P-S%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/07/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-P-S%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<img src="/2018/09/07/RabbitMQ五种模式-P-S模式/ps.jpg"><p>Send.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Send &#123;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_fanout&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, &quot;fanout&quot;);</span><br><span class="line">        String message = &quot;message&quot;;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, &quot;&quot;, null, message.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Recv.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Recv &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_ps_1&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_fanout&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &apos;&quot; + message + &quot;&apos;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recv2.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Recv2 &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue_ps_2&quot;;</span><br><span class="line">    public static String EXCHANGE_NAME = &quot;test_exchange_fanout&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &apos;&quot; + message + &quot;&apos;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &apos;java&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version = &apos;0.0.1-SNAPSHOT&apos;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &apos;com.rabbitmq&apos;, name: &apos;amqp-client&apos;, version: &apos;5.3.0&apos;</span><br><span class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/rabbit-mq" title="rabbit-mq源码地址​github.com" target="_blank" rel="noopener">rabbit-mq源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Socket</title>
      <link href="/2018/09/06/Java%20Socket/"/>
      <url>/2018/09/06/Java%20Socket/</url>
      
        <content type="html"><![CDATA[<p>Server.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocket serverSocket = new ServerSocket(8081);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            Socket socket = serverSocket.accept();</span><br><span class="line">            new Thread(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class="line">                        String str = &quot;&quot;;</span><br><span class="line">                        while ((str = bufferedReader.readLine()) != null) &#123;</span><br><span class="line">                            if (str.equals(&quot;1&quot;)) &#123;</span><br><span class="line">                                Thread.sleep(5 * 1000);</span><br><span class="line">                            &#125;</span><br><span class="line">                            System.out.println(str);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; catch (IOException | InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Client.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Socket socket = new Socket(&quot;localhost&quot;, 8081);</span><br><span class="line">        BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));</span><br><span class="line">        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in, &quot;UTF-8&quot;));</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            String str = bufferedReader.readLine();</span><br><span class="line">            bufferedWriter.write(str);</span><br><span class="line">            bufferedWriter.write(&quot;\n&quot;);</span><br><span class="line">            bufferedWriter.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/socket" title="Java Socket源码地址​github.com" target="_blank" rel="noopener">Java Socket源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ五种模式(WORK模式)</title>
      <link href="/2018/09/06/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-WORK%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/06/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-WORK%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<img src="/2018/09/06/RabbitMQ五种模式-WORK模式/work.jpg"><p>Send.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class Send &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        for (int i = 0; i &lt; 50; i++) &#123;</span><br><span class="line">            String message = &quot;message:\t&quot; + i;</span><br><span class="line">            channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, message.getBytes());</span><br><span class="line">            System.out.println(message);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(i * 10);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Recv.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Recv &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &apos;&quot; + message + &quot;&apos;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2 * 1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recv2.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Recv2 &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(1);</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &apos;&quot; + message + &quot;&apos;&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(10);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &apos;java&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version = &apos;0.0.1-SNAPSHOT&apos;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &apos;com.rabbitmq&apos;, name: &apos;amqp-client&apos;, version: &apos;5.3.0&apos;</span><br><span class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/rabbit-mq" title="rabbit-mq源码地址​github.com" target="_blank" rel="noopener">rabbit-mq源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ五种模式(SIMPLE模式)</title>
      <link href="/2018/09/05/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-SIMPLE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/05/RabbitMQ%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F-SIMPLE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<img src="/2018/09/05/RabbitMQ五种模式-SIMPLE模式/simple.jpg"><p>Send.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Send &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        String message = &quot;message&quot;;</span><br><span class="line">        channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, message.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Recv.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Recv &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;test_queue&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">        factory.setHost(&quot;localhost&quot;);</span><br><span class="line">        factory.setVirtualHost(&quot;/zhang&quot;);</span><br><span class="line">        factory.setUsername(&quot;zhang&quot;);</span><br><span class="line">        factory.setPassword(&quot;zhang&quot;);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(</span><br><span class="line">                QUEUE_NAME, false, false,</span><br><span class="line">                false, null</span><br><span class="line">        );</span><br><span class="line">        DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">                String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(&quot; [x] Received &apos;&quot; + message + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, true, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &apos;java&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version = &apos;0.0.1-SNAPSHOT&apos;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &apos;com.rabbitmq&apos;, name: &apos;amqp-client&apos;, version: &apos;5.3.0&apos;</span><br><span class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/OomelodyoO/Learn/tree/master/rabbit-mq" title="rabbit-mq源码地址​github.com" target="_blank" rel="noopener">rabbit-mq源码地址​github.com</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx配置ssl证书</title>
      <link href="/2018/09/04/Nginx%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/"/>
      <url>/2018/09/04/Nginx%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    ssl_certificate      /SSLPATH/zhang.crt;</span><br><span class="line">    ssl_certificate_key  /SSLPATH/zhang.key;</span><br><span class="line">    location / &#123;</span><br><span class="line">        # TOMCAT</span><br><span class="line">        proxy_pass http://localhost:5566;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://www.jianshu.com/p/75f8be79a421" title="OPENSSL 自签证书" target="_blank" rel="noopener">OPENSSL 自签证书</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Openssl 自签证书</title>
      <link href="/2018/09/04/Openssl%20%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6/"/>
      <url>/2018/09/04/Openssl%20%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-（-key）文件"><a href="#1-（-key）文件" class="headerlink" title="1.（.key）文件"></a>1.（.key）文件</h2><p>通常指私钥。</p><p>openssl genrsa -des3 -out zhang.key 1024</p><h2 id="2-（-csr）文件"><a href="#2-（-csr）文件" class="headerlink" title="2.（.csr）文件"></a>2.（.csr）文件</h2><p>csr 是Certificate Signing Request的缩写，即证书签名请求，这不是证书，可以简单理解成公钥，生成证书时要把这个提交给权威的证书颁发机构。</p><p>openssl req -new -key zhang.key -out zhang.csr<br><a id="more"></a></p><h2 id="3-（-crt）"><a href="#3-（-crt）" class="headerlink" title="3.（.crt）"></a>3.（.crt）</h2><p>crt 即 certificate的缩写，即证书。</p><p>openssl x509 -req -days 365 -in zhang.csr -signkey zhang.key -out zhang.crt</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openssl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Https</title>
      <link href="/2018/09/03/Https/"/>
      <url>/2018/09/03/Https/</url>
      
        <content type="html"><![CDATA[<h2 id="1-HTTP-应用层协议"><a href="#1-HTTP-应用层协议" class="headerlink" title="1.HTTP 应用层协议"></a>1.HTTP 应用层协议</h2><p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。</p><h2 id="2-SSL-TLS-会话层协议"><a href="#2-SSL-TLS-会话层协议" class="headerlink" title="2.SSL/TLS 会话层协议"></a>2.SSL/TLS 会话层协议</h2><p>SSL：（Secure Socket Layer，安全套接字层），位于可靠的面向连接的网络层协议和应用层协议之间的一种协议层。SSL通过互相认证、使用数字签名确保完整性、使用加密确保私密性，以实现客户端和服务器之间的安全通讯。该协议由两层组成：SSL记录协议和SSL握手协议。<br><a id="more"></a><br>TLS：(Transport Layer Security，传输层安全协议)，用于两个应用程序之间提供保密性和数据完整性。该协议由两层组成：TLS记录协议和TLS握手协议。</p><p>SSL是Netscape开发的专门用户保护Web通讯的，目前版本为3.0。最新版本的TLS 1.0是IETF(工程任务组)制定的一种新的协议，它建立在SSL 3.0协议规范之上，是SSL 3.0的后续版本。两者差别极小，可以理解为SSL 3.1，它是写入了RFC的。</p><h2 id="3-对称加密非对称加密"><a href="#3-对称加密非对称加密" class="headerlink" title="3.对称加密非对称加密"></a>3.对称加密非对称加密</h2><p>对称加密技术:“加密”和“解密”密钥相同</p><p>非对称加密技术“加密”和“解密”密钥不相同</p><h2 id="4-TPC-IP-传输层协议"><a href="#4-TPC-IP-传输层协议" class="headerlink" title="4.TPC/IP 传输层协议"></a>4.TPC/IP 传输层协议</h2><p>这层的功能包括是否选择差错恢复协议还是无差错恢复协议，及在同一主机上对不同应用的数据流的输入进行复用，还包括对收到的顺序不对的数据包的重新排序功能。</p><p>HTTPS=HTTP+SSL/TLS</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Http Session</title>
      <link href="/2018/08/31/Http%20Session/"/>
      <url>/2018/08/31/Http%20Session/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Cookie简介"><a href="#1-Cookie简介" class="headerlink" title="1.Cookie简介"></a>1.Cookie简介</h2><p>Cookie 是在 HTTP 协议下，服务器或脚本可以维护客户工作站上信息的一种方式。Cookie 是由 Web 服务器保存在用户浏览器（客户端）上的小文本文件，它可以包含有关用户的信息。无论何时用户链接到服务器，Web 站点都可以访问 Cookie 信息。</p><p>目前有些 Cookie 是临时的，有些则是持续的。临时的 Cookie 只在浏览器上保存一段规定的时间，一旦超过规定的时间，该 Cookie 就会被系统清除。</p><p>持续的 Cookie 则保存在用户的 Cookie 文件中，下一次用户返回时，仍然可以对它进行调用。在 Cookie 文件中保存 Cookie，有些用户担心 Cookie 中的用户信息被一些别有用心的人窃取，而造成一定的损害。其实，网站以外的用户无法跨过网站来获得 Cookie 信息。如果因为这种担心而屏蔽 Cookie，肯定会因此拒绝访问许多站点页面。因为，当今有许多 Web 站点开发人员使用 Cookie 技术，例如 Session 对象的使用就离不开 Cookie 的支持。</p><a id="more"></a><h2 id="2-Session简介"><a href="#2-Session简介" class="headerlink" title="2.Session简介"></a>2.Session简介</h2><p>Session 是 用于保持状态的基于 Web服务器的方法。Session 允许通过将对象存储在 Web服务器的内存中在整个用户会话过程中保持任何对象。</p><h2 id="3-实例代码"><a href="#3-实例代码" class="headerlink" title="3.实例代码"></a>3.实例代码</h2><p>SessionServlet.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;/session&quot;)</span><br><span class="line"></span><br><span class="line">public class SessionServletextends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">req.setAttribute(&quot;sessionID&quot;, req.getSession().getId());</span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(&quot;session.jsp&quot;).forward(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Session.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;requestScope.sessionID&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>build.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &apos;war&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version &apos;0.0.1&apos;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &apos;javax.servlet&apos;, name: &apos;javax.servlet-api&apos;, version: &apos;4.0.1&apos;</span><br><span class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.11&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/OomelodyoO/Learn/tree/master/http-session" title="http-session源码地址​github.com" target="_blank" rel="noopener">http-session源码地址​github.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>什么是广义，什么是狭义</title>
      <link href="/2018/02/23/%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%BF%E4%B9%89%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E7%8B%AD%E4%B9%89/"/>
      <url>/2018/02/23/%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%BF%E4%B9%89%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E7%8B%AD%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>广义：就是不渉及具体概念，只是一个框架，其有确定的抽象概念，但没有确定的形象概念。<br>狭义：就是在系统中设定或区分某一相对狭窄的、片面的、局部的点、面、区域、系统，主要指某一物质系统中具有特殊的、有别于一般的、非普遍的部分。相对广义而言。<br>广义包含狭义，例如：狭义上咱俩都是人，广义上咱俩都是动物。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 广义 </tag>
            
            <tag> 狭义 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS Install Mysql</title>
      <link href="/2018/02/13/CentOS%20Install%20Mysql/"/>
      <url>/2018/02/13/CentOS%20Install%20Mysql/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.http://dev.mysql.com/downloads/repo/yum/ 地址下载相对应rpm包</span><br><span class="line">2.rpm -ivh mysql57-community-release-el7-8.noarch.rpm (此时/etc/yum.reps.d/下已经有mysql地址源)</span><br><span class="line">3.yum makecache</span><br><span class="line">4.yum list | grep mysql(查询mysql-server)</span><br><span class="line">5.yum install mysql-community-server.x86_64 进行安装</span><br><span class="line">6.service mysqld restart</span><br><span class="line">7.cat /var/log/mysqld.log | grep password</span><br><span class="line">8.vi /etc/my.cnf ([mysqld] 下增加 validate-password=OFF 关闭密码长度等机制)</span><br><span class="line">9.systemctl restart mysqld.service (重启服务)</span><br><span class="line">10.mysql -uroot -p (登录mysql)</span><br><span class="line">11.SET PASSWORD = PASSWORD(&apos;root&apos;);</span><br><span class="line">    ALTER USER &apos;root&apos;@&apos;localhost&apos; PASSWORD EXPIRE NEVER;</span><br><span class="line">    flush privileges;</span><br><span class="line">12.</span><br><span class="line">client端用户命令：</span><br><span class="line">GRANT ALL ON *.* TO root@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;</span><br><span class="line">(GRANT &lt;privileges&gt; ON &lt;what&gt; TO &lt;user&gt; [IDENTIFIED BY &quot;&lt;password&gt;&quot;] [WITH GRANT OPTION];)</span><br><span class="line">(</span><br><span class="line">打开MYSQL:service mysqld start</span><br><span class="line">关闭MYSQL:service mysqld stop</span><br><span class="line">)</span><br><span class="line">13.firewall-cmd --zone=public --add-port=3306/tcp --permanent (防火墙)</span><br><span class="line">    systemctl stop firewalld</span><br><span class="line">    systemctl start firewalld</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS Install ShadowSocks</title>
      <link href="/2018/02/13/CentOS%20Install%20ShadowSocks/"/>
      <url>/2018/02/13/CentOS%20Install%20ShadowSocks/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel</span><br><span class="line">yum install gcc</span><br><span class="line">yum install openssl-devel</span><br><span class="line"></span><br><span class="line">wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz</span><br><span class="line">xz -d Python-2.7.12.tar.xz &amp; tar xvf Python-2.7.12.tar</span><br><span class="line">tar xvf Python-2.7.12.tar</span><br><span class="line">cd Python-2.7.12</span><br><span class="line">./configure --with-zlib=/usr/include</span><br><span class="line">make &amp;&amp; make altinstall</span><br><span class="line">cd /usr/bin</span><br><span class="line">mv python python_bak</span><br><span class="line">ln -s /usr/local/bin/python2.7 ./python</span><br><span class="line">vi yum</span><br><span class="line">cd</span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line">yum install m2crypto</span><br><span class="line">cd</span><br><span class="line">wget https://download.libsodium.org/libsodium/releases/libsodium-1.0.11.tar.gz</span><br><span class="line">tar -xvf libsodium-1.0.11.tar.gz</span><br><span class="line">cd libsodium-1.0.11</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">echo /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf</span><br><span class="line">ldconfig</span><br><span class="line"></span><br><span class="line">ssserver -c config -d start</span><br><span class="line">ssserver -c config -d stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> ShadowSocks </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python Pip Requirements</title>
      <link href="/2018/02/08/Python%20Pip%20Requirements/"/>
      <url>/2018/02/08/Python%20Pip%20Requirements/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//导出requirements</span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line">//导入requirements</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pip </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS Install Redis</title>
      <link href="/2018/02/08/CentOS%20Install%20Redis/"/>
      <url>/2018/02/08/CentOS%20Install%20Redis/</url>
      
        <content type="html"><![CDATA[<p>已安装GCC<br><a href="http://redis.io/download" target="_blank" rel="noopener">REDIS下载地址</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.2.3.tar.gz</span><br><span class="line">tar xzf redis-3.2.3.tar.gz</span><br><span class="line">cd redis-3.2.3</span><br><span class="line">&lt;make (致命错误：jemalloc/jemalloc.h：没有那个文件或目录)&gt;</span><br><span class="line">make MALLOC=libc</span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line">    systemctl stop firewalld</span><br><span class="line">    systemctl start firewalld</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>redis.conf 末尾增加bing 0.0.0.0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br><span class="line">redis-cli -h xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql Data Backup</title>
      <link href="/2018/02/07/Mysql%20Data%20Backup/"/>
      <url>/2018/02/07/Mysql%20Data%20Backup/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Create-sh-script-file"><a href="#1-Create-sh-script-file" class="headerlink" title="1.Create sh script file"></a>1.Create sh script file</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch backup.sh</span><br></pre></td></tr></table></figure><h2 id="2-Copy-this-code-and-paste-it-into-backup-sh-script-file"><a href="#2-Copy-this-code-and-paste-it-into-backup-sh-script-file" class="headerlink" title="2.Copy this code and paste it into backup.sh script file"></a>2.Copy this code and paste it into backup.sh script file</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#bin/sh</span><br><span class="line">MYSQLDUMP=YOUR_MYSQLDUMP_PATH</span><br><span class="line">MYSQL_USERNAME=YOUR_MYSQL_USERNAME</span><br><span class="line">MYSQL_PASSWORD=YOUR_MYSQL_PASSWORD</span><br><span class="line">MYSQL_HOST=YOUR_MYSQL_HOST</span><br><span class="line">MYSQL_PORT=YOUR_MYSQL_PORT</span><br><span class="line">MYSQL_DB=YOUR_MYSQL_DB</span><br><span class="line">SQL_NAME=$&#123;MYSQL_DB&#125;&quot;_&quot;&quot;`date &quot;+%Y%m%d%H%M%S&quot;`&quot;&quot;.sql&quot;</span><br><span class="line">$&#123;MYSQLDUMP&#125; -u$&#123;MYSQL_USERNAME&#125; -h$&#123;MYSQL_HOST&#125; -P$&#123;MYSQL_PORT&#125; -p$&#123;MYSQL_PASSWORD&#125; $&#123;MYSQL_DB&#125; &gt; ./$&#123;SQL_NAME&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="3-Modify-file-permissions"><a href="#3-Modify-file-permissions" class="headerlink" title="3.Modify file permissions"></a>3.Modify file permissions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 ./backup.sh</span><br></pre></td></tr></table></figure><h2 id="4-Execute-sh-script-file"><a href="#4-Execute-sh-script-file" class="headerlink" title="4. Execute sh script file"></a>4. Execute sh script file</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./backup.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS Install Nginx</title>
      <link href="/2018/02/07/CentOS%20Install%20Nginx/"/>
      <url>/2018/02/07/CentOS%20Install%20Nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="1-INSTALL"><a href="#1-INSTALL" class="headerlink" title="1.INSTALL"></a>1.INSTALL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 http://nginx.org/en/linux_packages.html##stable</span><br><span class="line">2.cd /etc/yum.repos.d/</span><br><span class="line">3.nginx.repo</span><br><span class="line">4.yum makecache</span><br><span class="line">5.yum install nginx.x86_64</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-USE"><a href="#2-USE" class="headerlink" title="2.USE"></a>2.USE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start: nginx</span><br><span class="line">stop: nginx -s stop</span><br><span class="line">reload: nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
